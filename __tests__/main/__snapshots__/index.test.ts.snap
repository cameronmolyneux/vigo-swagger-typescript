// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate generate Code 1`] = `
"/* eslint-disable @typescript-eslint/no-explicit-any */

/**
* AUTO_GENERATED Do not change this file directly, rerun the yarn vigo-swag-ts command*/

import { AxiosRequestConfig } from \\"axios\\";
import { VigoResponse } from \\"../config\\";
import { Http } from \\"../httpRequest\\";
import { ServiceLocation } from '../serviceLocationsAxios';
import { DeleteByinvitationIdRemoveQueryParams, GetQueryParams, GetActiveQueryParams, GetByconnectionIdEpayQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetCommissionQueryParams, GetQueryParams, GetQueryParams, GetCountQueryParams, GetReportQueryParams, GetQrByaccountNumberQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetCommissionSumQueryParams, GetCommissionReportQueryParams, GetLinksCountQueryParams, GetLinksReportQueryParams, GetLinksPaidCountQueryParams, GetLinksPaidReportQueryParams, GetTransactionsCountQueryParams, GetTransactionsReportQueryParams, GetIntroducedCountQueryParams, GetIntroducedReportQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetAllQueryParams, GetQueryParams, GetQueryParams, GetCommissionQueryParams, GetQrcodeQueryParams, GetSettlementRequestComissionQueryParams, GetEpayRequestComissionQueryParams, GetQueryParams, GetTransferMoneyCommissionQueryParams, TotpLoginResult, RequestTotpInput, RegisterNewUserQuery, RegisterApiModel, VerifyPhoneNumberInput, SetUserBasicInfoInput, ForgetPasswordQuery, UserForgetPasswordInput, UserVerifyForgetPasswordInput, BankApiModel, BusinessCategoryApiModel, SubUserConnectionApiModel, SendConnectionRequestInput, EditConnectionInfoInput, SubUserPermissionApiModel, SetAccountAccessForSubUserInput, EditSubUserPermissionInput, SubUserActivityApiModel, EpayRequestApiModel, EpayRequestForUserQuery, EpayRequestDetailApiModel, ContactApiModel, CommissionAmountApiModel, UserMinimalDto, EpayRequestPublicInfoApiModel, WalletReceiptApiModel, EpayRequestPayInput, AggregationApiModel, ReportApiModel, EpayRequestTaskInput, FileApiModel, GroupTransferTargetValidationQuery, GroupTransferTargetValidationInput, GroupTransferQuery, GroupTransferInput, DriverInfoResult, TaxiRecieptApiDto, ClientPurchaseInput, KpiResult, MachineSignUp, FullRegisterApiModel, ImportantActionApiModel, NotificationApiModel, UnreadNotificationCountApiModel, PluginApiModel, PosLandingPageApiModel, PosWalletPayInput, PosOnlinePayInput, BankReceiptApiModel, ResellerApiModel, ReselledUserFilterData, ReselledUserApiModel, ReselledUserActivityApiModel, DateReportApiModelOfDecimal, DateReportApiModelOfInteger, EpayRequestWcfResult, EpayRequestServiceInput, EpayRequestCheckStatusResult, DivideEpayRequestServiceInput, DividedEpayRequestUnblockResult, DividedEpayRequestUnblockInput, DividedEpayRequestCancelResult, DividedEpayRequestCancelInput, InitApiModel, SettingApiModel, TerminalVersionApiModel, SubDomainApiModel, SubDomainUpdateApiModel, BusinessUserConnectionApiModel, SubUserAccountDetailQuery, TransactionApiModel, AllTransactionsReportApiModel, AccountInfoApiModel, TransferMoneyApiModel, UserBankApiModel, UserBankDetailApiModel, UserBankChangeVisibilityInput, UserDetailQuery, UserMeQuery, UserProfileInput, UserProfileAvatarInput, UserChangePasswordInput, UserWorkspaceQuery, UserIdentityRequestQuery, NewUserIdentityRequestInput, UpgradeToBusinessApiModel, UpgradeToBusinessUserInput, SubUserInvitationApiModel, SubuserInvitationTaskInput, UserPluginDetailApiModel, UserPluginApiModel, UserPluginTogggleApiModel, WalletDisplayApiModel, WalletDetailApiModel, AccountSettingNotificationStatusApiModel, AccountBalanceApiModel, AccountPermittedSubUserQuery, NewChargeRequestResultQuery, NewChargeRequestInput, RequestBodyTransferMoneyInput, RequestBodyNewEpayRequestInput, RequestBodyFile_Upload, RequestBodyLogEventLevel, RequestBodySubUserNotificationStatusInput, RequestBodyUserBankInput, RequestBodyAccountCreationApiModel,}  from \\"../../../undefined/\\"


/**
 * 
 * Disconnect sub user connection
[Feature just allowed for the business users]
[Needs secure login]
 */
export const deleteByconnectionId = async (
    
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  return await Http.delete(ServiceLocation. + '/BusinessUser/connection/{connectionId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Disconnect business user connection
[Feature just allowed for SubUsers]
[Needs secure login]
[Deprecated, use 'user/connection/{connectionId}' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const deleteByconnectionId = async (
    
/**
 * 
 * connection id
 */
connectionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (BusinessUserConnectionApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"deleteByconnectionId\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.delete(ServiceLocation. + '/SubUser/connection/{connectionId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Disconnect business user connection
[Feature just allowed for normal users]
[Needs secure login]
 */
export const deleteByconnectionId = async (
    
/**
 * 
 * connection id
 */
connectionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (BusinessUserConnectionApiModel)>> => {
  
  return await Http.delete(ServiceLocation. + '/User/connection/{connectionId}',
    undefined,
    undefined,
    configOverride
    )
}

export const deleteByconnectionIdPermissionByuserWalletId = async (
    connectionId: number,
/**
 * 
 * Id of Account to delete it's permissios
 */
userWalletId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.delete(ServiceLocation. + '/BusinessUser/connection/{connectionId}/permission/{userWalletId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Remove an invitation
[Feature just allowed for the business users]
[Needs secure login]
 */
export const deleteByinvitationIdRemove = async (
    invitationId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  return await Http.delete(ServiceLocation. + '/BusinessUser/invite/{invitationId}/remove',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Remove an invitation
[Feature just allowed for the business users]
[Needs secure login]
[Deprecated, use 'businessuser/invite/{invitationId}/remove' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const deleteByinvitationIdRemove = async (
    invitationId: string,queryParams: DeleteByinvitationIdRemoveQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"deleteByinvitationIdRemove\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.delete(ServiceLocation. + '/BusinessUser/connection/{invitationId}/remove',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get available banks
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<BankApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/Bank',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get Business categories
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<BusinessCategoryApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/category',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the connections
[Feature just allowed for the business users]
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<SubUserConnectionApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/connection',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<EpayRequestApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/excel',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get pay requests that the user is one of its audiences.
[Feature is not allowed for sub users]
[Needs secure login]
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<EpayRequestForUserQuery[]>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/forMe',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get epay request detail based on Id
 */
export const get = async (
    
/**
 * 
 * EpayRequest's Id
 */
epayId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestDetailApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/{epayId}',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/count',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<ReportApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/report',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/error',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/error/local',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Download a file.
 */
export const get = async (
    
/**
 * 
 * file unique id
 */
fileGuid: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/File/{fileGu ' + id + '}',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (CommissionAmountApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/GroupTransfer/commission',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get detailed driver,taxi and fair amount information
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (DriverInfoResult)>> => {
  
  return await Http.get(ServiceLocation. + '/Integration',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<KpiResult[]>> => {
  
  return await Http.get(ServiceLocation. + '/Kpi/Last',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<KpiResult[]>> => {
  
  return await Http.get(ServiceLocation. + '/Kpi/Current',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<KpiResult[]>> => {
  
  return await Http.get(ServiceLocation. + '/Kpi',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get all Important Actions of current user.
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<ImportantActionApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/Notification/ia',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get Notifications of current user.
Maximum 99 items will be returned.
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<NotificationApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/Notification/notif',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<UnreadNotificationCountApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/Notification/unread',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    pluginId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (PluginApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Plugin/{pluginId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get epay request detail
 */
export const get = async (
    
/**
 * 
 * Account Number
 */
accountNumber: string,queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (PosLandingPageApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Pos/{accountNumber}',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get bank receipt by EPayRequest token
[For anonymous users]
[Deprecated, use 'receipt/bank/{epayTryId}' and 'receipt/bank/{epayTryId}' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const get = async (
    
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (BankReceiptApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"get\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/Receipt/{epayToken}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the Resellership info of current Reseller user
[Feature just allowed for Resellers]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (ResellerApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/ResellerUser',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the Users Introduced by current Reseller user
[Feature just allowed for Resellers]
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<ReselledUserApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/ResellerUser/introduced',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get info of a SubDomain by it's address.
 */
export const get = async (
    
/**
 * 
 * The SubDomain part of the url.
            
 */
subDomainAddress: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubDomainApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/SubDomain/{subDomainAddress}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the SubDomain of current Reseller user
[Feature just allowed for Resellers]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubDomainApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/SubDomain',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the connections
[Feature just allowed for SubUsers]
[Deprecated. use 'user/connection' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<BusinessUserConnectionApiModel[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"get\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/SubUser/connection',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<TransactionApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/Transaction',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/Transaction/excel',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get a Transaction by it's Id
[Needs secure login]
 */
export const get = async (
    transactionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (TransactionApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Transaction/{transactionId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<ReportApiModel[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"get\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/Transaction/report',
    queryParams,
    undefined,
    configOverride
    )
}

export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AccountInfoApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Transfer/search',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get recent money transfers
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<TransferMoneyApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/Transfer/recent',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get user banks
[Feature is not allowed for sub users.]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<UserBankApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/UserBank',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get available user banks
[Feature is not allowed for sub users.]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<UserBankApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/UserBank/ready',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * get user bank detail
[Needs secure login]
 */
export const get = async (
    
/**
 * 
 * User bank id
 */
userBankId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserBankDetailApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/UserBank/{userBankId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get [normal/sub/business] user profile detail
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserDetailQuery)>> => {
  
  return await Http.get(ServiceLocation. + '/User',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get user profile summary
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserMeQuery)>> => {
  
  return await Http.get(ServiceLocation. + '/User/me',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get user work spaces
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<UserWorkspaceQuery[]>> => {
  
  return await Http.get(ServiceLocation. + '/User/workspace',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get last national id verification request [Feature is not allowed for sub users]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserIdentityRequestQuery)>> => {
  
  return await Http.get(ServiceLocation. + '/User/ ' + id + 'entityRequest',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get Last Request for upgrade account to the business [Feature is allowed for normal users only]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UpgradeToBusinessApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/User/upgradeToBusinessRequest',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get business user invitations for me [Feature is not allowed for sub users]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<SubUserInvitationApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/User/invitation',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the connections [Feature is allowed for normal users noly]
 */
export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<BusinessUserConnectionApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/User/connection',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<UserPluginDetailApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/UserPlugin',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<WalletDisplayApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/UserWallet',
    undefined,
    undefined,
    configOverride
    )
}

export const get = async (
    userWalletId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (WalletDetailApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/UserWallet/{userWalletId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const get = async (
    queryParams: GetQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AccountInfoApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"get\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/UserWallet/search',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get active connections ordered by Transactions count
[Feature just allowed for the business users]
 */
export const getActive = async (
    queryParams: GetActiveQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<SubUserConnectionApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/connection/active',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getAll = async (
    queryParams: GetAllQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AllTransactionsReportApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getAll\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/Transaction/report/all',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get user account balance
 */
export const getBalance = async (
    userWalletId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AccountBalanceApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/UserWallet/{userWalletId}/balance',
    undefined,
    undefined,
    configOverride
    )
}

export const getBycode = async (
    code: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/error/status/{code}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the connection detail
[Feature just allowed for the business users]
[Needs secure login]
 */
export const getByconnectionId = async (
    
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/connection/{connectionId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the connection amounts report
[Feature just allowed for the business users]
[Needs secure login]
 */
export const getByconnectionIdActivity = async (
    
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserActivityApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/connection/{connectionId}/activity',
    undefined,
    undefined,
    configOverride
    )
}

export const getByconnectionIdEpay = async (
    connectionId: number,queryParams: GetByconnectionIdEpayQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<EpayRequestApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/connection/{connectionId}/epay',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get sub user permissions for accounts
[Feature just allowed for the business users]
[Needs secure login]
 */
export const getByconnectionIdPermission = async (
    
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<SubUserPermissionApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/BusinessUser/connection/{connectionId}/permission',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get wallet receipt by EPayRequest token
[For anonymous users]
 */
export const getByepayToken = async (
    
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (WalletReceiptApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Receipt/wallet/{epayToken}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get bank receipt by EPayTry id
[For anonymous users]
 */
export const getByepayTryId = async (
    
/**
 * 
 * EpayTry's id to get receipt for
 */
epayTryId: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (BankReceiptApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Receipt/bank/{epayTryId}',
    undefined,
    undefined,
    configOverride
    )
}

export const getByinput = async (
    input: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (ContactApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/User/contact/{input}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get business user invitations for me [Feature is not allowed for sub users]
 */
export const getByinvitationToken = async (
    invitationToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserInvitationApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/User/invitation/{invitationToken}',
    undefined,
    undefined,
    configOverride
    )
}

export const getBylogicalAction = async (
    userWalletId: number,logicalAction: \\"EpayRequest\\" | \\"TransferMoney\\" | \\"AccountChargeRequest\\" | \\"ServiceBill\\" | \\"ServiceMobileCharge\\" | \\"POS\\" | \\"ShareAndBlockRequest\\" | \\"ShareRequest\\" | \\"Settlement\\" | \\"GroupTransferMoney\\" | \\"ShareAndUnblock\\" | \\"Refund\\" | \\"PayCommand\\" | \\"Gift\\" | \\"TaxiFairPayment\\" | \\"HitoBitFee\\",configOverride?:AxiosRequestConfig
): Promise<VigoResponse<boolean>> => {
  
  return await Http.get(ServiceLocation. + '/Access/{userWalletId}/{logicalAction}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the User activity
[Feature just allowed for Resellers]
 */
export const getByuserIdActivity = async (
    userId: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (ReselledUserActivityApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/ResellerUser/introduced/{userId}/activity',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get permission details of an Account
[Feature just allowed for SubUsers]
 */
export const getByuserWalletId = async (
    userWalletId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserAccountDetailQuery)>> => {
  
  return await Http.get(ServiceLocation. + '/SubUser/account/{userWalletId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get comission amount for epay request amount
 */
export const getCommission = async (
    userWalletId: number,queryParams: GetCommissionQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (CommissionAmountApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/{userWalletId}/commission',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get commission amount for transfer money amount
 */
export const getCommission = async (
    userWalletId: number,queryParams: GetCommissionQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (CommissionAmountApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/Transfer/{userWalletId}/commission',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get the time-based report of commissions paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getCommissionReport = async (
    queryParams: GetCommissionReportQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<DateReportApiModelOfDecimal[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getCommissionReport\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/commission/report',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get sum of all commissions paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getCommissionSum = async (
    queryParams: GetCommissionSumQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getCommissionSum\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/commission/sum',
    queryParams,
    undefined,
    configOverride
    )
}

export const getCount = async (
    queryParams: GetCountQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/forMe/count',
    queryParams,
    undefined,
    configOverride
    )
}

export const getCreators = async (
    userWalletId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<UserMinimalDto[]>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/{userWalletId}/creators',
    undefined,
    undefined,
    configOverride
    )
}

export const getDetail = async (
    epayToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestPublicInfoApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/{epayToken}/detail',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getEpayRequestComission = async (
    userWalletId: number,queryParams: GetEpayRequestComissionQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (CommissionAmountApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getEpayRequestComission\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/UserWallet/{userWalletId}/epayRequest/comission',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get filter data items to populate DropDowns
[Feature just allowed for Resellers]
 */
export const getFilterData = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (ReselledUserFilterData)>> => {
  
  return await Http.get(ServiceLocation. + '/ResellerUser/introduced/filterData',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get count of all users reselled by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getIntroducedCount = async (
    queryParams: GetIntroducedCountQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getIntroducedCount\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/introduced/count',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get time-based report of users reselled by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getIntroducedReport = async (
    queryParams: GetIntroducedReportQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<DateReportApiModelOfInteger[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getIntroducedReport\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/introduced/report',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get count of all links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getLinksCount = async (
    queryParams: GetLinksCountQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getLinksCount\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/links/count',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get count of all paid links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getLinksPaidCount = async (
    queryParams: GetLinksPaidCountQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getLinksPaidCount\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/links/pa ' + id + '/count',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get time-based report of paid links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getLinksPaidReport = async (
    queryParams: GetLinksPaidReportQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<DateReportApiModelOfInteger[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getLinksPaidReport\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/links/pa ' + id + '/report',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get time-based report of links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getLinksReport = async (
    queryParams: GetLinksReportQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<DateReportApiModelOfInteger[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getLinksReport\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/links/report',
    queryParams,
    undefined,
    configOverride
    )
}

export const getPermittedsubusers = async (
    userWalletId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<AccountPermittedSubUserQuery[]>> => {
  
  return await Http.get(ServiceLocation. + '/UserWallet/{userWalletId}/permittedsubusers',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * [Deprecated, use 'account/{accountNumber}/qrcode' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getQrByaccountNumber = async (
    accountNumber: string,queryParams: GetQrByaccountNumberQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getQrByaccountNumber\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/EpayRequest/pos/Qr/{accountNumber}',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get QR code image file for epay request
 */
export const getQrcode = async (
    
/**
 * 
 * epay request token
 */
epayToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/{epayToken}/qrcode',
    undefined,
    undefined,
    configOverride
    )
}

export const getQrcode = async (
    accountNumber: string,queryParams: GetQrcodeQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.get(ServiceLocation. + '/UserWallet/{accountNumber}/qrcode',
    queryParams,
    undefined,
    configOverride
    )
}

export const getRecent = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<ContactApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/audiences/recent',
    undefined,
    undefined,
    configOverride
    )
}

export const getReport = async (
    queryParams: GetReportQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<ReportApiModel[]>> => {
  
  return await Http.get(ServiceLocation. + '/EpayRequest/forMe/report',
    queryParams,
    undefined,
    configOverride
    )
}

export const getSettlementRequestComission = async (
    userWalletId: number,queryParams: GetSettlementRequestComissionQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (CommissionAmountApiModel)>> => {
  
  return await Http.get(ServiceLocation. + '/UserWallet/{userWalletId}/settlementRequest/comission',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get count of all commission transactions, paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getTransactionsCount = async (
    queryParams: GetTransactionsCountQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (AggregationApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getTransactionsCount\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/transactions/count',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * 
 * Get time-based report of commission transactions, paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getTransactionsReport = async (
    queryParams: GetTransactionsReportQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<DateReportApiModelOfInteger[]>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getTransactionsReport\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/ResellerUser/dashboard/transactions/report',
    queryParams,
    undefined,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const getTransferMoneyCommission = async (
    userWalletId: number,queryParams: GetTransferMoneyCommissionQueryParams,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (CommissionAmountApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"getTransferMoneyCommission\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.get(ServiceLocation. + '/UserWallet/{userWalletId}/transferMoney/commission',
    queryParams,
    undefined,
    configOverride
    )
}

export const post = async (
    requestBody: RegisterApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (RegisterNewUserQuery)>> => {
  
  return await Http.post(ServiceLocation. + '/Auth/register',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Recover forgotten password with phone number (Two factor authentication)
 */
export const post = async (
    requestBody: UserForgetPasswordInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (ForgetPasswordQuery)>> => {
  
  return await Http.post(ServiceLocation. + '/Auth/forgetPassword',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Send a connection request to sub user
[Feature just allowed for the business users]
 */
export const post = async (
    requestBody: SendConnectionRequestInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/BusinessUser/invite',
    undefined,
    requestBody,
    configOverride
    )
}

export const post = async (
    
/**
 * 
 * User Wallet id
 */
userWalletId: number,requestBody: RequestBodyNewEpayRequestInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestDetailApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/EpayRequest/{userWalletId}',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Upload new file
[Allowed files are images and pdf / Max Size: 3 MB]
 */
export const post = async (
    requestBody: RequestBodyFile_Upload,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (FileApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/File',
    undefined,
    objToForm(requestBody),
    configOverride
    )
}


/**
 * 
 * [for Business users only]
 */
export const post = async (
    requestBody: RequestBodyFile_Upload,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<GroupTransferTargetValidationQuery[]>> => {
  
  return await Http.post(ServiceLocation. + '/GroupTransfer/import',
    undefined,
    objToForm(requestBody),
    configOverride
    )
}


/**
 * 
 * [for Business users only]
 */
export const post = async (
    requestBody: GroupTransferTargetValidationQuery[],configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/GroupTransfer/export',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * [for Business users only]
 */
export const post = async (
    requestBody: GroupTransferInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (GroupTransferQuery)>> => {
  
  return await Http.post(ServiceLocation. + '/GroupTransfer/transfer',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Pay taxi fair amount
 */
export const post = async (
    requestBody: ClientPurchaseInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (TaxiRecieptApiDto)>> => {
  
  return await Http.post(ServiceLocation. + '/Integration/TaxiPayment',
    undefined,
    requestBody,
    configOverride
    )
}

export const post = async (
    requestBody: FullRegisterApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (MachineSignUp)>> => {
  
  return await Http.post(ServiceLocation. + '/Machine/RegisterUser',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Create an new [EpayRequest] with the given model.
 */
export const post = async (
    requestBody: EpayRequestServiceInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestWcfResult)>> => {
  
  return await Http.post(ServiceLocation. + '/Service/NewEpayRequest',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Check the [EpayRequest] based on token
 */
export const post = async (
    requestBody: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestCheckStatusResult)>> => {
  
  return await Http.post(ServiceLocation. + '/Service/CheckEpayRequest',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Verify the ApiKey for authorizing the [User]
 */
export const post = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<boolean>> => {
  
  return await Http.post(ServiceLocation. + '/Service/VerifyApiKey',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Create a Divided [EpayRequest] for the given model.
 */
export const post = async (
    requestBody: DivideEpayRequestServiceInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestWcfResult)>> => {
  
  return await Http.post(ServiceLocation. + '/Service/NewDiv ' + id + 'eEpayRequest',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Unblock Amount of an Divided[EpayRequest]
 */
export const post = async (
    requestBody: DividedEpayRequestUnblockInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (DividedEpayRequestUnblockResult)>> => {
  
  return await Http.post(ServiceLocation. + '/Service/UnblockAmount',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Cancel Amount of an Divided[EpayRequest]
 */
export const post = async (
    requestBody: DividedEpayRequestCancelInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (DividedEpayRequestCancelResult)>> => {
  
  return await Http.post(ServiceLocation. + '/Service/CancelAmount',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Set [EPayRequest] status to 'Cancel' and cancel the payment
 */
export const post = async (
    requestBody: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<boolean>> => {
  
  return await Http.post(ServiceLocation. + '/Service/CancelPayment',
    undefined,
    requestBody,
    configOverride
    )
}

export const post = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (InitApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Settings/init',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Transfer money
 */
export const post = async (
    userWalletId: number,requestBody: RequestBodyTransferMoneyInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (TransferMoneyApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Transfer/{userWalletId}',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Create a new user bank
[Feature is not allowed for sub users]
[Needs secure login]
 */
export const post = async (
    requestBody: RequestBodyUserBankInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserBankApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/UserBank',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Change user password
 */
export const post = async (
    requestBody: UserChangePasswordInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/User/changePassword',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Create a new national id verification request [Feature is allowed for normal users noly]
 */
export const post = async (
    requestBody: NewUserIdentityRequestInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserDetailQuery)>> => {
  
  return await Http.post(ServiceLocation. + '/User/ ' + id + 'entityRequest',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Request for upgrade account to the business [Feature is allowed for normal users only]
 */
export const post = async (
    requestBody: UpgradeToBusinessUserInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UpgradeToBusinessApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/User/upgradeToBusinessRequest',
    undefined,
    requestBody,
    configOverride
    )
}

export const post = async (
    requestBody: RequestBodyAccountCreationApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<number>> => {
  
  return await Http.post(ServiceLocation. + '/UserWallet',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Set basic data for your registration [fullname, password]
 */
export const postBasic = async (
    requestBody: SetUserBasicInfoInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/Auth/register/basic',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Set access to the account for sub user
[Feature just allowed for the business users]
[Needs secure login]
 */
export const postByconnectionIdPermission = async (
    
/**
 * 
 * Connection Id
 */
connectionId: number,requestBody: SetAccountAccessForSubUserInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/BusinessUser/connection/{connectionId}/permission',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Resend Connection Request to Sub-User
[Feature just allowed for the business users]
[Deprecated, use 'businessuser/invite/{invitationId}/resend' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const postByinvitationId = async (
    
/**
 * 
 * Invitation Id
 */
invitationId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"postByinvitationId\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.post(ServiceLocation. + '/BusinessUser/resend/{invitationId}',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Resend Connection Request to Sub-User
[Feature just allowed for the business users]
 */
export const postByinvitationIdResend = async (
    
/**
 * 
 * Invitation Id
 */
invitationId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/BusinessUser/invite/{invitationId}/resend',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Create a new task for executing the actions of the business user invitation [Accept/Reject]
[Feature is not allowed for sub users]
[Deprecated, use 'user/invitation/{invitationToken}/accept' and 'user/invitation/{invitationToken}/reject' instead.]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const postByinvitationIdTask = async (
    
/**
 * 
 * invitation id
 */
invitationId: number,requestBody: SubuserInvitationTaskInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  if (__DEV__) {
    console.warn(
      \\"postByinvitationIdTask\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.post(ServiceLocation. + '/User/invitation/{invitationId}/task',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * accept an Invitation and cerate a SubUserConnection.
[Feature is not allowed for sub users]
 */
export const postByinvitationTokenAccept = async (
    
/**
 * 
 * invitation token
 */
invitationToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/User/invitation/{invitationToken}/accept',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * reject an Invitation.
[Feature is not allowed for sub users]
 */
export const postByinvitationTokenReject = async (
    
/**
 * 
 * invitation token
 */
invitationToken: string,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/User/invitation/{invitationToken}/reject',
    undefined,
    undefined,
    configOverride
    )
}


/**
 * 
 * Pay POS link Online
 */
export const postBytargetAccountNumberOnline = async (
    
/**
 * 
 * Target account number
 */
targetAccountNumber: string,requestBody: PosOnlinePayInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestDetailApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Pos/pay/{targetAccountNumber}/online',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Pay POS link with Wallet
 */
export const postBytargetAccountNumberWallet = async (
    
/**
 * 
 * Target account number
 */
targetAccountNumber: string,requestBody: PosWalletPayInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (WalletReceiptApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Pos/pay/{targetAccountNumber}/wallet',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const postByuserWalletId = async (
    
/**
 * 
 * UserWallet's Id
 */
userWalletId: number,requestBody: RequestBodySubUserNotificationStatusInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  if (__DEV__) {
    console.warn(
      \\"postByuserWalletId\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.post(ServiceLocation. + '/SubUser/notification/{userWalletId}',
    undefined,
    requestBody,
    configOverride
    )
}

export const postByuserWalletIdNotification = async (
    
/**
 * 
 * UserWallet's Id
 */
userWalletId: number,requestBody: RequestBodySubUserNotificationStatusInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/SubUser/account/{userWalletId}/notification',
    undefined,
    requestBody,
    configOverride
    )
}

export const postCancel = async (
    epayId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/EpayRequest/{epayId}/cancel',
    undefined,
    undefined,
    configOverride
    )
}

export const postCharge = async (
    userWalletId: number,requestBody: NewChargeRequestInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (NewChargeRequestResultQuery)>> => {
  
  return await Http.post(ServiceLocation. + '/UserWallet/{userWalletId}/charge',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const postEpayRequest = async (
    userWalletId: number,requestBody: RequestBodyNewEpayRequestInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (EpayRequestDetailApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"postEpayRequest\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.post(ServiceLocation. + '/UserWallet/{userWalletId}/epayRequest',
    undefined,
    requestBody,
    configOverride
    )
}

export const postLog = async (
    configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/api/CspReport/Log',
    undefined,
    undefined,
    configOverride
    )
}

export const postOtpGenerate = async (
    requestBody: RequestTotpInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (TotpLoginResult)>> => {
  
  return await Http.post(ServiceLocation. + '/Auth/login/otp/generate',
    undefined,
    requestBody,
    configOverride
    )
}

export const postPayByuserWalletId = async (
    epayToken: string,userWalletId: number,requestBody: EpayRequestPayInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (WalletReceiptApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/EpayRequest/{epayToken}/pay/{userWalletId}',
    undefined,
    requestBody,
    configOverride
    )
}

export const postResend = async (
    epayId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/EpayRequest/{epayId}/resend',
    undefined,
    undefined,
    configOverride
    )
}

export const postSwitch = async (
    requestBody: RequestBodyLogEventLevel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SettingApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Settings/log/switch',
    undefined,
    requestBody,
    configOverride
    )
}

export const postSwitchSeptapay = async (
    requestBody: RequestBodyLogEventLevel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SettingApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Settings/log/switch/septapay',
    undefined,
    requestBody,
    configOverride
    )
}

export const postSwitchSerilog = async (
    requestBody: RequestBodyLogEventLevel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SettingApiModel)>> => {
  
  return await Http.post(ServiceLocation. + '/Settings/log/switch/serilog',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Create a new task for executing the actions of epay request [Resend/Cancel]
[Deprecated, use 'epayrequest/{id}/cancel' and 'epayrequest/{id}/resend' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const postTask = async (
    epayId: number,requestBody: EpayRequestTaskInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  if (__DEV__) {
    console.warn(
      \\"postTask\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.post(ServiceLocation. + '/EpayRequest/{epayId}/task',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const postTransferMoney = async (
    userWalletId: number,requestBody: RequestBodyTransferMoneyInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (TransferMoneyApiModel)>> => {
  
  if (__DEV__) {
    console.warn(
      \\"postTransferMoney\\",
      \\"This endpoint deprecated and will be remove. Please use an alternative\\",
    );
  }
  return await Http.post(ServiceLocation. + '/UserWallet/{userWalletId}/transferMoney',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Confirm the phone number with verification code
 */
export const postVerify = async (
    requestBody: VerifyPhoneNumberInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/Auth/register/verify',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Confirm the phone number with a verification code for recover password
 */
export const postVerify = async (
    requestBody: UserVerifyForgetPasswordInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/Auth/forgetPassword/verify',
    undefined,
    requestBody,
    configOverride
    )
}

export const postVersion = async (
    requestBody: TerminalVersionApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.post(ServiceLocation. + '/Settings/terminal/version',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * [for Business users only]
 */
export const put = async (
    requestBody: GroupTransferTargetValidationInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (GroupTransferTargetValidationQuery)>> => {
  
  return await Http.put(ServiceLocation. + '/GroupTransfer/add',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Update the SubDomain of current Reseller user
[Feature just allowed for Resellers]
 */
export const put = async (
    requestBody: SubDomainUpdateApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubDomainApiModel)>> => {
  
  return await Http.put(ServiceLocation. + '/SubDomain',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Edit user bank
[Needs secure login]
 */
export const put = async (
    
/**
 * 
 * User bank id
 */
userBankId: number,requestBody: RequestBodyUserBankInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserBankApiModel)>> => {
  
  return await Http.put(ServiceLocation. + '/UserBank/{userBankId}',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Edit profile [state, city, address]
[Feature is not allowed for business users]
[Needs secure login]
 */
export const put = async (
    requestBody: UserProfileInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserDetailQuery)>> => {
  
  return await Http.put(ServiceLocation. + '/User',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Change user avatar
[Needs secure login]
 */
export const put = async (
    requestBody: UserProfileAvatarInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.put(ServiceLocation. + '/User/changeAvatar',
    undefined,
    requestBody,
    configOverride
    )
}

export const put = async (
    userWalletId: number,requestBody: RequestBodyAccountCreationApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (WalletDisplayApiModel)>> => {
  
  return await Http.put(ServiceLocation. + '/UserWallet/{userWalletId}',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Change sub user connection info
[Feature just allowed for the business users]
[Needs secure login]
 */
export const putByconnectionId = async (
    
/**
 * 
 * Connection Id
 */
connectionId: number,requestBody: EditConnectionInfoInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (SubUserConnectionApiModel)>> => {
  
  return await Http.put(ServiceLocation. + '/BusinessUser/connection/{connectionId}',
    undefined,
    requestBody,
    configOverride
    )
}

export const putByconnectionIdPermissionByuserWalletId = async (
    connectionId: number,
/**
 * 
 * Id of Account to edit it's permissios
 */
userWalletId: number,requestBody: EditSubUserPermissionInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.put(ServiceLocation. + '/BusinessUser/connection/{connectionId}/permission/{userWalletId}',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Dismiss an Important Action forever.
 */
export const putBynotifIdDismiss = async (
    notifId: number,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.put(ServiceLocation. + '/Notification/ia/{notifId}/dismiss',
    undefined,
    undefined,
    configOverride
    )
}

export const putChangeStatus = async (
    userPluginId: number,requestBody: UserPluginTogggleApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse< & (UserPluginApiModel)>> => {
  
  return await Http.put(ServiceLocation. + '/UserPlugin/{userPluginId}/ChangeStatus',
    undefined,
    requestBody,
    configOverride
    )
}


/**
 * 
 * Change user bank show-in-list property
[Needs secure login]
 */
export const putChangeVisibility = async (
    userBankId: number,requestBody: UserBankChangeVisibilityInput,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.put(ServiceLocation. + '/UserBank/{userBankId}/changeVisibility',
    undefined,
    requestBody,
    configOverride
    )
}

export const putNotification = async (
    userWalletId: number,requestBody: AccountSettingNotificationStatusApiModel,configOverride?:AxiosRequestConfig
): Promise<VigoResponse<string>> => {
  
  return await Http.put(ServiceLocation. + '/UserWallet/{userWalletId}/notification',
    undefined,
    requestBody,
    configOverride
    )
}
"
`;

exports[`generate generate hooks 1`] = `
"
/**
* AUTO_GENERATED Do not change this file directly, rerun the yarn vigo-swag-ts command*/


import { AxiosRequestConfig } from \\"axios\\";
import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
  
  QueryClient,
  QueryKey,
} from \\"react-query\\";
import { RequestError, VigoResponse } from \\"./config\\";

import { AccountBalanceApiModel, AccountInfoApiModel, AccountPermittedSubUserQuery, AccountSettingNotificationStatusApiModel, AggregationApiModel, AllTransactionsReportApiModel, BankApiModel, BankReceiptApiModel, BusinessCategoryApiModel, BusinessUserConnectionApiModel, ClientPurchaseInput, CommissionAmountApiModel, ContactApiModel, DateReportApiModelOfDecimal, DateReportApiModelOfInteger, DeleteByinvitationIdRemoveQueryParams, DivideEpayRequestServiceInput, DividedEpayRequestCancelInput, DividedEpayRequestCancelResult, DividedEpayRequestUnblockInput, DividedEpayRequestUnblockResult, DriverInfoResult, EditConnectionInfoInput, EditSubUserPermissionInput, EpayRequestApiModel, EpayRequestCheckStatusResult, EpayRequestDetailApiModel, EpayRequestForUserQuery, EpayRequestPayInput, EpayRequestPublicInfoApiModel, EpayRequestServiceInput, EpayRequestTaskInput, EpayRequestWcfResult, FileApiModel, ForgetPasswordQuery, FullRegisterApiModel, GetActiveQueryParams, GetAllQueryParams, GetByconnectionIdEpayQueryParams, GetCommissionQueryParams, GetCommissionQueryParams, GetCommissionReportQueryParams, GetCommissionSumQueryParams, GetCountQueryParams, GetEpayRequestComissionQueryParams, GetIntroducedCountQueryParams, GetIntroducedReportQueryParams, GetLinksCountQueryParams, GetLinksPaidCountQueryParams, GetLinksPaidReportQueryParams, GetLinksReportQueryParams, GetQrByaccountNumberQueryParams, GetQrcodeQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetQueryParams, GetReportQueryParams, GetSettlementRequestComissionQueryParams, GetTransactionsCountQueryParams, GetTransactionsReportQueryParams, GetTransferMoneyCommissionQueryParams, GroupTransferInput, GroupTransferQuery, GroupTransferTargetValidationInput, GroupTransferTargetValidationQuery, ImportantActionApiModel, InitApiModel, KpiResult, MachineSignUp, NewChargeRequestInput, NewChargeRequestResultQuery, NewUserIdentityRequestInput, NotificationApiModel, PluginApiModel, PosLandingPageApiModel, PosOnlinePayInput, PosWalletPayInput, RegisterApiModel, RegisterNewUserQuery, ReportApiModel, RequestBodyAccountCreationApiModel, RequestBodyFile_Upload, RequestBodyLogEventLevel, RequestBodyNewEpayRequestInput, RequestBodySubUserNotificationStatusInput, RequestBodyTransferMoneyInput, RequestBodyUserBankInput, RequestTotpInput, ReselledUserActivityApiModel, ReselledUserApiModel, ReselledUserFilterData, ResellerApiModel, SendConnectionRequestInput, SetAccountAccessForSubUserInput, SetUserBasicInfoInput, SettingApiModel, SubDomainApiModel, SubDomainUpdateApiModel, SubUserAccountDetailQuery, SubUserActivityApiModel, SubUserConnectionApiModel, SubUserInvitationApiModel, SubUserPermissionApiModel, SubuserInvitationTaskInput, TaxiRecieptApiDto, TerminalVersionApiModel, TotpLoginResult, TransactionApiModel, TransferMoneyApiModel, UnreadNotificationCountApiModel, UpgradeToBusinessApiModel, UpgradeToBusinessUserInput, UserBankApiModel, UserBankChangeVisibilityInput, UserBankDetailApiModel, UserChangePasswordInput, UserDetailQuery, UserForgetPasswordInput, UserIdentityRequestQuery, UserMeQuery, UserMinimalDto, UserPluginApiModel, UserPluginDetailApiModel, UserPluginTogggleApiModel, UserProfileAvatarInput, UserProfileInput, UserVerifyForgetPasswordInput, UserWorkspaceQuery, VerifyPhoneNumberInput, WalletDetailApiModel, WalletDisplayApiModel, WalletReceiptApiModel,}  from \\"./types\\"
import { deleteByconnectionId, deleteByconnectionId, deleteByconnectionId, deleteByconnectionIdPermissionByuserWalletId, deleteByinvitationIdRemove, deleteByinvitationIdRemove, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, get, getActive, getAll, getBalance, getBycode, getByconnectionId, getByconnectionIdActivity, getByconnectionIdEpay, getByconnectionIdPermission, getByepayToken, getByepayTryId, getByinput, getByinvitationToken, getBylogicalAction, getByuserIdActivity, getByuserWalletId, getCommission, getCommission, getCommissionReport, getCommissionSum, getCount, getCreators, getDetail, getEpayRequestComission, getFilterData, getIntroducedCount, getIntroducedReport, getLinksCount, getLinksPaidCount, getLinksPaidReport, getLinksReport, getPermittedsubusers, getQrByaccountNumber, getQrcode, getQrcode, getRecent, getReport, getSettlementRequestComission, getTransactionsCount, getTransactionsReport, getTransferMoneyCommission, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, post, postBasic, postByconnectionIdPermission, postByinvitationId, postByinvitationIdResend, postByinvitationIdTask, postByinvitationTokenAccept, postByinvitationTokenReject, postBytargetAccountNumberOnline, postBytargetAccountNumberWallet, postByuserWalletId, postByuserWalletIdNotification, postCancel, postCharge, postEpayRequest, postLog, postOtpGenerate, postPayByuserWalletId, postResend, postSwitch, postSwitchSeptapay, postSwitchSerilog, postTask, postTransferMoney, postVerify, postVerify, postVersion, put, put, put, put, put, put, putByconnectionId, putByconnectionIdPermissionByuserWalletId, putBynotifIdDismiss, putChangeStatus, putChangeVisibility, putNotification,}  from \\"./services\\"

    type InternalMutationDefaultParams<TExtra> = {_extraVariables?:TExtra, configOverride?:AxiosRequestConfig}
    type InternalUseQueryOptions<TData> = UseQueryOptions<SwaggerResponse<TData>,RequestError | Error>;

    type InternalUseMutationOptions<TData, TRequest, TExtra> = UseMutationOptions<
      SwaggerResponse<TData>,
      RequestError | Error,
      TRequest & InternalMutationDefaultParams<TExtra>
    >;

    type InternalUseMutationOptionsVoid<
      TData,
      TExtra
    > = UseMutationOptions<
      SwaggerResponse<TData>,
      RequestError | Error,
      InternalMutationDefaultParams<TExtra> | void
    >;  
    
      
/**
 * 
 * Disconnect sub user connection
[Feature just allowed for the business users]
[Needs secure login]
 */
export const useDeleteByconnectionId =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {
/**
 * 
 * Connection Id
 */
connectionId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,
          
          
           configOverride } = _o || {};

            return deleteByconnectionId(
                 connectionId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Disconnect business user connection
[Feature just allowed for SubUsers]
[Needs secure login]
[Deprecated, use 'user/connection/{connectionId}' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useDeleteByconnectionId =<TExtra> (
           options?:InternalUseMutationOptions< & (BusinessUserConnectionApiModel), {
/**
 * 
 * connection id
 */
connectionId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,
          
          
           configOverride } = _o || {};

            return deleteByconnectionId(
                 connectionId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Disconnect business user connection
[Feature just allowed for normal users]
[Needs secure login]
 */
export const useDeleteByconnectionId =<TExtra> (
           options?:InternalUseMutationOptions< & (BusinessUserConnectionApiModel), {
/**
 * 
 * connection id
 */
connectionId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,
          
          
           configOverride } = _o || {};

            return deleteByconnectionId(
                 connectionId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const useDeleteByconnectionIdPermissionByuserWalletId =<TExtra> (
           options?:InternalUseMutationOptions<string, {connectionId: number,
/**
 * 
 * Id of Account to delete it's permissios
 */
userWalletId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,userWalletId,
          
          
           configOverride } = _o || {};

            return deleteByconnectionIdPermissionByuserWalletId(
                 connectionId,userWalletId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Remove an invitation
[Feature just allowed for the business users]
[Needs secure login]
 */
export const useDeleteByinvitationIdRemove =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {invitationId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationId,
          
          
           configOverride } = _o || {};

            return deleteByinvitationIdRemove(
                 invitationId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Remove an invitation
[Feature just allowed for the business users]
[Needs secure login]
[Deprecated, use 'businessuser/invite/{invitationId}/remove' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useDeleteByinvitationIdRemove =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {invitationId: string,queryParams: DeleteByinvitationIdRemoveQueryParams,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationId,
          
          queryParams,
           configOverride } = _o || {};

            return deleteByinvitationIdRemove(
                 invitationId,
          
          queryParams,
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Get available banks
 */
export const useGet = (
           options?:InternalUseQueryOptions<BankApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<BankApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get Business categories
 */
export const useGet = (
           options?:InternalUseQueryOptions<BusinessCategoryApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<BusinessCategoryApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the connections
[Feature just allowed for the business users]
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<SubUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<SubUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<EpayRequestApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<EpayRequestApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get pay requests that the user is one of its audiences.
[Feature is not allowed for sub users]
[Needs secure login]
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<EpayRequestForUserQuery[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<EpayRequestForUserQuery[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get epay request detail based on Id
 */
export const useGet = (
           
/**
 * 
 * EpayRequest's Id
 */
epayId: number,options?:InternalUseQueryOptions< & (EpayRequestDetailApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( epayId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (
/**
 * 
 * EpayRequest's Id
 */
epayId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,epayId,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   epayId,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            
/**
 * 
 * EpayRequest's Id
 */
epayId: number,options?:InternalUseQueryOptions< & (EpayRequestDetailApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( epayId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<ReportApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<ReportApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Download a file.
 */
export const useGet = (
           
/**
 * 
 * file unique id
 */
fileGuid: string,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( fileGuid,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (
/**
 * 
 * file unique id
 */
fileGuid: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,fileGuid,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   fileGuid,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            
/**
 * 
 * file unique id
 */
fileGuid: string,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( fileGuid,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get detailed driver,taxi and fair amount information
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (DriverInfoResult)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (DriverInfoResult)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<KpiResult[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<KpiResult[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<KpiResult[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<KpiResult[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<KpiResult[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<KpiResult[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get all Important Actions of current user.
 */
export const useGet = (
           options?:InternalUseQueryOptions<ImportantActionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<ImportantActionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get Notifications of current user.
Maximum 99 items will be returned.
 */
export const useGet = (
           options?:InternalUseQueryOptions<NotificationApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<NotificationApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<UnreadNotificationCountApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<UnreadNotificationCountApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           pluginId: number,options?:InternalUseQueryOptions< & (PluginApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( pluginId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (pluginId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,pluginId,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   pluginId,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            pluginId: number,options?:InternalUseQueryOptions< & (PluginApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( pluginId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get epay request detail
 */
export const useGet = (
           
/**
 * 
 * Account Number
 */
accountNumber: string,queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (PosLandingPageApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( accountNumber,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (
/**
 * 
 * Account Number
 */
accountNumber: string,queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,accountNumber,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   accountNumber,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            
/**
 * 
 * Account Number
 */
accountNumber: string,queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (PosLandingPageApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( accountNumber,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get bank receipt by EPayRequest token
[For anonymous users]
[Deprecated, use 'receipt/bank/{epayTryId}' and 'receipt/bank/{epayTryId}' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGet = (
           
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,options?:InternalUseQueryOptions< & (BankReceiptApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( epayToken,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,epayToken,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   epayToken,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,options?:InternalUseQueryOptions< & (BankReceiptApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( epayToken,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the Resellership info of current Reseller user
[Feature just allowed for Resellers]
 */
export const useGet = (
           options?:InternalUseQueryOptions< & (ResellerApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (ResellerApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the Users Introduced by current Reseller user
[Feature just allowed for Resellers]
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<ReselledUserApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<ReselledUserApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get info of a SubDomain by it's address.
 */
export const useGet = (
           
/**
 * 
 * The SubDomain part of the url.
            
 */
subDomainAddress: string,headerParams: {
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},options?:InternalUseQueryOptions< & (SubDomainApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( subDomainAddress,
          
          
          headerParams, configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (
/**
 * 
 * The SubDomain part of the url.
            
 */
subDomainAddress: string,headerParams: {
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,subDomainAddress,
            
            
            headerParams,] as QueryKey,
                fun: () =>
                get(
                   subDomainAddress,
          
          
          headerParams,
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            
/**
 * 
 * The SubDomain part of the url.
            
 */
subDomainAddress: string,headerParams: {
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},options?:InternalUseQueryOptions< & (SubDomainApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( subDomainAddress,
          
          
          headerParams, configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the SubDomain of current Reseller user
[Feature just allowed for Resellers]
 */
export const useGet = (
           options?:InternalUseQueryOptions< & (SubDomainApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (SubDomainApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the connections
[Feature just allowed for SubUsers]
[Deprecated. use 'user/connection' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGet = (
           options?:InternalUseQueryOptions<BusinessUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<BusinessUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<TransactionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<TransactionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get a Transaction by it's Id
[Needs secure login]
 */
export const useGet = (
           transactionId: number,options?:InternalUseQueryOptions< & (TransactionApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( transactionId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (transactionId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,transactionId,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   transactionId,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            transactionId: number,options?:InternalUseQueryOptions< & (TransactionApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( transactionId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<ReportApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<ReportApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (AccountInfoApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (AccountInfoApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get recent money transfers
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions<TransferMoneyApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions<TransferMoneyApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get user banks
[Feature is not allowed for sub users.]
 */
export const useGet = (
           options?:InternalUseQueryOptions<UserBankApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<UserBankApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get available user banks
[Feature is not allowed for sub users.]
 */
export const useGet = (
           options?:InternalUseQueryOptions<UserBankApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<UserBankApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * get user bank detail
[Needs secure login]
 */
export const useGet = (
           
/**
 * 
 * User bank id
 */
userBankId: number,options?:InternalUseQueryOptions< & (UserBankDetailApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( userBankId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (
/**
 * 
 * User bank id
 */
userBankId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,userBankId,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   userBankId,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            
/**
 * 
 * User bank id
 */
userBankId: number,options?:InternalUseQueryOptions< & (UserBankDetailApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( userBankId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get [normal/sub/business] user profile detail
 */
export const useGet = (
           options?:InternalUseQueryOptions< & (UserDetailQuery)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (UserDetailQuery)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get user profile summary
 */
export const useGet = (
           options?:InternalUseQueryOptions< & (UserMeQuery)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (UserMeQuery)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get user work spaces
 */
export const useGet = (
           options?:InternalUseQueryOptions<UserWorkspaceQuery[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<UserWorkspaceQuery[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get last national id verification request [Feature is not allowed for sub users]
 */
export const useGet = (
           options?:InternalUseQueryOptions< & (UserIdentityRequestQuery)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (UserIdentityRequestQuery)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get Last Request for upgrade account to the business [Feature is allowed for normal users only]
 */
export const useGet = (
           options?:InternalUseQueryOptions< & (UpgradeToBusinessApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (UpgradeToBusinessApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get business user invitations for me [Feature is not allowed for sub users]
 */
export const useGet = (
           options?:InternalUseQueryOptions<SubUserInvitationApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<SubUserInvitationApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the connections [Feature is allowed for normal users noly]
 */
export const useGet = (
           options?:InternalUseQueryOptions<BusinessUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<BusinessUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           options?:InternalUseQueryOptions<UserPluginDetailApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<UserPluginDetailApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           options?:InternalUseQueryOptions<WalletDisplayApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<WalletDisplayApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGet = (
           userWalletId: number,options?:InternalUseQueryOptions< & (WalletDetailApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( userWalletId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (userWalletId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,userWalletId,
            
            
            ] as QueryKey,
                fun: () =>
                get(
                   userWalletId,
          
          
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            userWalletId: number,options?:InternalUseQueryOptions< & (WalletDetailApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( userWalletId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGet = (
           queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (AccountInfoApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGet.info = (queryParams: GetQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [get.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                get(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGet.prefetch = (
            client: QueryClient,
            queryParams: GetQueryParams,options?:InternalUseQueryOptions< & (AccountInfoApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGet.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get active connections ordered by Transactions count
[Feature just allowed for the business users]
 */
export const useGetActive = (
           queryParams: GetActiveQueryParams,options?:InternalUseQueryOptions<SubUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetActive.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetActive.info = (queryParams: GetActiveQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getActive.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getActive(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetActive.prefetch = (
            client: QueryClient,
            queryParams: GetActiveQueryParams,options?:InternalUseQueryOptions<SubUserConnectionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetActive.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetAll = (
           queryParams: GetAllQueryParams,options?:InternalUseQueryOptions< & (AllTransactionsReportApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetAll.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetAll.info = (queryParams: GetAllQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getAll.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getAll(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetAll.prefetch = (
            client: QueryClient,
            queryParams: GetAllQueryParams,options?:InternalUseQueryOptions< & (AllTransactionsReportApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetAll.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get user account balance
 */
export const useGetBalance = (
           userWalletId: number,options?:InternalUseQueryOptions< & (AccountBalanceApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetBalance.info( userWalletId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetBalance.info = (userWalletId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getBalance.key,userWalletId,
            
            
            ] as QueryKey,
                fun: () =>
                getBalance(
                   userWalletId,
          
          
          
                  configOverride
                ),
              };
            };useGetBalance.prefetch = (
            client: QueryClient,
            userWalletId: number,options?:InternalUseQueryOptions< & (AccountBalanceApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetBalance.info( userWalletId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetBycode = (
           code: number,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetBycode.info( code,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetBycode.info = (code: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getBycode.key,code,
            
            
            ] as QueryKey,
                fun: () =>
                getBycode(
                   code,
          
          
          
                  configOverride
                ),
              };
            };useGetBycode.prefetch = (
            client: QueryClient,
            code: number,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetBycode.info( code,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the connection detail
[Feature just allowed for the business users]
[Needs secure login]
 */
export const useGetByconnectionId = (
           
/**
 * 
 * Connection Id
 */
connectionId: number,options?:InternalUseQueryOptions< & (SubUserConnectionApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByconnectionId.info( connectionId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByconnectionId.info = (
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByconnectionId.key,connectionId,
            
            
            ] as QueryKey,
                fun: () =>
                getByconnectionId(
                   connectionId,
          
          
          
                  configOverride
                ),
              };
            };useGetByconnectionId.prefetch = (
            client: QueryClient,
            
/**
 * 
 * Connection Id
 */
connectionId: number,options?:InternalUseQueryOptions< & (SubUserConnectionApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByconnectionId.info( connectionId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the connection amounts report
[Feature just allowed for the business users]
[Needs secure login]
 */
export const useGetByconnectionIdActivity = (
           
/**
 * 
 * Connection Id
 */
connectionId: number,options?:InternalUseQueryOptions< & (SubUserActivityApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByconnectionIdActivity.info( connectionId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByconnectionIdActivity.info = (
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByconnectionIdActivity.key,connectionId,
            
            
            ] as QueryKey,
                fun: () =>
                getByconnectionIdActivity(
                   connectionId,
          
          
          
                  configOverride
                ),
              };
            };useGetByconnectionIdActivity.prefetch = (
            client: QueryClient,
            
/**
 * 
 * Connection Id
 */
connectionId: number,options?:InternalUseQueryOptions< & (SubUserActivityApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByconnectionIdActivity.info( connectionId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetByconnectionIdEpay = (
           connectionId: number,queryParams: GetByconnectionIdEpayQueryParams,options?:InternalUseQueryOptions<EpayRequestApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByconnectionIdEpay.info( connectionId,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByconnectionIdEpay.info = (connectionId: number,queryParams: GetByconnectionIdEpayQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByconnectionIdEpay.key,connectionId,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getByconnectionIdEpay(
                   connectionId,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetByconnectionIdEpay.prefetch = (
            client: QueryClient,
            connectionId: number,queryParams: GetByconnectionIdEpayQueryParams,options?:InternalUseQueryOptions<EpayRequestApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByconnectionIdEpay.info( connectionId,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get sub user permissions for accounts
[Feature just allowed for the business users]
[Needs secure login]
 */
export const useGetByconnectionIdPermission = (
           
/**
 * 
 * Connection Id
 */
connectionId: number,options?:InternalUseQueryOptions<SubUserPermissionApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByconnectionIdPermission.info( connectionId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByconnectionIdPermission.info = (
/**
 * 
 * Connection Id
 */
connectionId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByconnectionIdPermission.key,connectionId,
            
            
            ] as QueryKey,
                fun: () =>
                getByconnectionIdPermission(
                   connectionId,
          
          
          
                  configOverride
                ),
              };
            };useGetByconnectionIdPermission.prefetch = (
            client: QueryClient,
            
/**
 * 
 * Connection Id
 */
connectionId: number,options?:InternalUseQueryOptions<SubUserPermissionApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByconnectionIdPermission.info( connectionId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get wallet receipt by EPayRequest token
[For anonymous users]
 */
export const useGetByepayToken = (
           
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,options?:InternalUseQueryOptions< & (WalletReceiptApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByepayToken.info( epayToken,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByepayToken.info = (
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByepayToken.key,epayToken,
            
            
            ] as QueryKey,
                fun: () =>
                getByepayToken(
                   epayToken,
          
          
          
                  configOverride
                ),
              };
            };useGetByepayToken.prefetch = (
            client: QueryClient,
            
/**
 * 
 * EpayRequest's token to get receipt for
 */
epayToken: string,options?:InternalUseQueryOptions< & (WalletReceiptApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByepayToken.info( epayToken,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get bank receipt by EPayTry id
[For anonymous users]
 */
export const useGetByepayTryId = (
           
/**
 * 
 * EpayTry's id to get receipt for
 */
epayTryId: string,options?:InternalUseQueryOptions< & (BankReceiptApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByepayTryId.info( epayTryId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByepayTryId.info = (
/**
 * 
 * EpayTry's id to get receipt for
 */
epayTryId: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByepayTryId.key,epayTryId,
            
            
            ] as QueryKey,
                fun: () =>
                getByepayTryId(
                   epayTryId,
          
          
          
                  configOverride
                ),
              };
            };useGetByepayTryId.prefetch = (
            client: QueryClient,
            
/**
 * 
 * EpayTry's id to get receipt for
 */
epayTryId: string,options?:InternalUseQueryOptions< & (BankReceiptApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByepayTryId.info( epayTryId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetByinput = (
           input: string,options?:InternalUseQueryOptions< & (ContactApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByinput.info( input,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByinput.info = (input: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByinput.key,input,
            
            
            ] as QueryKey,
                fun: () =>
                getByinput(
                   input,
          
          
          
                  configOverride
                ),
              };
            };useGetByinput.prefetch = (
            client: QueryClient,
            input: string,options?:InternalUseQueryOptions< & (ContactApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByinput.info( input,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get business user invitations for me [Feature is not allowed for sub users]
 */
export const useGetByinvitationToken = (
           invitationToken: string,options?:InternalUseQueryOptions< & (SubUserInvitationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByinvitationToken.info( invitationToken,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByinvitationToken.info = (invitationToken: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByinvitationToken.key,invitationToken,
            
            
            ] as QueryKey,
                fun: () =>
                getByinvitationToken(
                   invitationToken,
          
          
          
                  configOverride
                ),
              };
            };useGetByinvitationToken.prefetch = (
            client: QueryClient,
            invitationToken: string,options?:InternalUseQueryOptions< & (SubUserInvitationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByinvitationToken.info( invitationToken,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetBylogicalAction = (
           userWalletId: number,logicalAction: \\"EpayRequest\\" | \\"TransferMoney\\" | \\"AccountChargeRequest\\" | \\"ServiceBill\\" | \\"ServiceMobileCharge\\" | \\"POS\\" | \\"ShareAndBlockRequest\\" | \\"ShareRequest\\" | \\"Settlement\\" | \\"GroupTransferMoney\\" | \\"ShareAndUnblock\\" | \\"Refund\\" | \\"PayCommand\\" | \\"Gift\\" | \\"TaxiFairPayment\\" | \\"HitoBitFee\\",options?:InternalUseQueryOptions<boolean>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetBylogicalAction.info( userWalletId,logicalAction,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetBylogicalAction.info = (userWalletId: number,logicalAction: \\"EpayRequest\\" | \\"TransferMoney\\" | \\"AccountChargeRequest\\" | \\"ServiceBill\\" | \\"ServiceMobileCharge\\" | \\"POS\\" | \\"ShareAndBlockRequest\\" | \\"ShareRequest\\" | \\"Settlement\\" | \\"GroupTransferMoney\\" | \\"ShareAndUnblock\\" | \\"Refund\\" | \\"PayCommand\\" | \\"Gift\\" | \\"TaxiFairPayment\\" | \\"HitoBitFee\\",configOverride?:AxiosRequestConfig) => {
              return {
                key: [getBylogicalAction.key,userWalletId,logicalAction,
            
            
            ] as QueryKey,
                fun: () =>
                getBylogicalAction(
                   userWalletId,logicalAction,
          
          
          
                  configOverride
                ),
              };
            };useGetBylogicalAction.prefetch = (
            client: QueryClient,
            userWalletId: number,logicalAction: \\"EpayRequest\\" | \\"TransferMoney\\" | \\"AccountChargeRequest\\" | \\"ServiceBill\\" | \\"ServiceMobileCharge\\" | \\"POS\\" | \\"ShareAndBlockRequest\\" | \\"ShareRequest\\" | \\"Settlement\\" | \\"GroupTransferMoney\\" | \\"ShareAndUnblock\\" | \\"Refund\\" | \\"PayCommand\\" | \\"Gift\\" | \\"TaxiFairPayment\\" | \\"HitoBitFee\\",options?:InternalUseQueryOptions<boolean>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetBylogicalAction.info( userWalletId,logicalAction,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the User activity
[Feature just allowed for Resellers]
 */
export const useGetByuserIdActivity = (
           userId: string,options?:InternalUseQueryOptions< & (ReselledUserActivityApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByuserIdActivity.info( userId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByuserIdActivity.info = (userId: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByuserIdActivity.key,userId,
            
            
            ] as QueryKey,
                fun: () =>
                getByuserIdActivity(
                   userId,
          
          
          
                  configOverride
                ),
              };
            };useGetByuserIdActivity.prefetch = (
            client: QueryClient,
            userId: string,options?:InternalUseQueryOptions< & (ReselledUserActivityApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByuserIdActivity.info( userId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get permission details of an Account
[Feature just allowed for SubUsers]
 */
export const useGetByuserWalletId = (
           userWalletId: number,options?:InternalUseQueryOptions< & (SubUserAccountDetailQuery)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetByuserWalletId.info( userWalletId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetByuserWalletId.info = (userWalletId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getByuserWalletId.key,userWalletId,
            
            
            ] as QueryKey,
                fun: () =>
                getByuserWalletId(
                   userWalletId,
          
          
          
                  configOverride
                ),
              };
            };useGetByuserWalletId.prefetch = (
            client: QueryClient,
            userWalletId: number,options?:InternalUseQueryOptions< & (SubUserAccountDetailQuery)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetByuserWalletId.info( userWalletId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get comission amount for epay request amount
 */
export const useGetCommission = (
           userWalletId: number,queryParams: GetCommissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetCommission.info( userWalletId,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetCommission.info = (userWalletId: number,queryParams: GetCommissionQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getCommission.key,userWalletId,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getCommission(
                   userWalletId,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetCommission.prefetch = (
            client: QueryClient,
            userWalletId: number,queryParams: GetCommissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetCommission.info( userWalletId,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get commission amount for transfer money amount
 */
export const useGetCommission = (
           userWalletId: number,queryParams: GetCommissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetCommission.info( userWalletId,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetCommission.info = (userWalletId: number,queryParams: GetCommissionQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getCommission.key,userWalletId,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getCommission(
                   userWalletId,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetCommission.prefetch = (
            client: QueryClient,
            userWalletId: number,queryParams: GetCommissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetCommission.info( userWalletId,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get the time-based report of commissions paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetCommissionReport = (
           queryParams: GetCommissionReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfDecimal[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetCommissionReport.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetCommissionReport.info = (queryParams: GetCommissionReportQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getCommissionReport.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getCommissionReport(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetCommissionReport.prefetch = (
            client: QueryClient,
            queryParams: GetCommissionReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfDecimal[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetCommissionReport.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get sum of all commissions paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetCommissionSum = (
           queryParams: GetCommissionSumQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetCommissionSum.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetCommissionSum.info = (queryParams: GetCommissionSumQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getCommissionSum.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getCommissionSum(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetCommissionSum.prefetch = (
            client: QueryClient,
            queryParams: GetCommissionSumQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetCommissionSum.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetCount = (
           queryParams: GetCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetCount.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetCount.info = (queryParams: GetCountQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getCount.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getCount(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetCount.prefetch = (
            client: QueryClient,
            queryParams: GetCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetCount.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetCreators = (
           userWalletId: number,options?:InternalUseQueryOptions<UserMinimalDto[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetCreators.info( userWalletId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetCreators.info = (userWalletId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getCreators.key,userWalletId,
            
            
            ] as QueryKey,
                fun: () =>
                getCreators(
                   userWalletId,
          
          
          
                  configOverride
                ),
              };
            };useGetCreators.prefetch = (
            client: QueryClient,
            userWalletId: number,options?:InternalUseQueryOptions<UserMinimalDto[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetCreators.info( userWalletId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetDetail = (
           epayToken: string,options?:InternalUseQueryOptions< & (EpayRequestPublicInfoApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetDetail.info( epayToken,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetDetail.info = (epayToken: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getDetail.key,epayToken,
            
            
            ] as QueryKey,
                fun: () =>
                getDetail(
                   epayToken,
          
          
          
                  configOverride
                ),
              };
            };useGetDetail.prefetch = (
            client: QueryClient,
            epayToken: string,options?:InternalUseQueryOptions< & (EpayRequestPublicInfoApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetDetail.info( epayToken,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetEpayRequestComission = (
           userWalletId: number,queryParams: GetEpayRequestComissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetEpayRequestComission.info( userWalletId,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetEpayRequestComission.info = (userWalletId: number,queryParams: GetEpayRequestComissionQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getEpayRequestComission.key,userWalletId,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getEpayRequestComission(
                   userWalletId,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetEpayRequestComission.prefetch = (
            client: QueryClient,
            userWalletId: number,queryParams: GetEpayRequestComissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetEpayRequestComission.info( userWalletId,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get filter data items to populate DropDowns
[Feature just allowed for Resellers]
 */
export const useGetFilterData = (
           options?:InternalUseQueryOptions< & (ReselledUserFilterData)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetFilterData.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetFilterData.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [getFilterData.key,
            
            
            ] as QueryKey,
                fun: () =>
                getFilterData(
                   
          
          
          
                  configOverride
                ),
              };
            };useGetFilterData.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions< & (ReselledUserFilterData)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetFilterData.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get count of all users reselled by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetIntroducedCount = (
           queryParams: GetIntroducedCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetIntroducedCount.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetIntroducedCount.info = (queryParams: GetIntroducedCountQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getIntroducedCount.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getIntroducedCount(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetIntroducedCount.prefetch = (
            client: QueryClient,
            queryParams: GetIntroducedCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetIntroducedCount.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get time-based report of users reselled by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetIntroducedReport = (
           queryParams: GetIntroducedReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetIntroducedReport.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetIntroducedReport.info = (queryParams: GetIntroducedReportQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getIntroducedReport.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getIntroducedReport(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetIntroducedReport.prefetch = (
            client: QueryClient,
            queryParams: GetIntroducedReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetIntroducedReport.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get count of all links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetLinksCount = (
           queryParams: GetLinksCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetLinksCount.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetLinksCount.info = (queryParams: GetLinksCountQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getLinksCount.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getLinksCount(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetLinksCount.prefetch = (
            client: QueryClient,
            queryParams: GetLinksCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetLinksCount.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get count of all paid links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetLinksPaidCount = (
           queryParams: GetLinksPaidCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetLinksPaidCount.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetLinksPaidCount.info = (queryParams: GetLinksPaidCountQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getLinksPaidCount.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getLinksPaidCount(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetLinksPaidCount.prefetch = (
            client: QueryClient,
            queryParams: GetLinksPaidCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetLinksPaidCount.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get time-based report of paid links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetLinksPaidReport = (
           queryParams: GetLinksPaidReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetLinksPaidReport.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetLinksPaidReport.info = (queryParams: GetLinksPaidReportQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getLinksPaidReport.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getLinksPaidReport(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetLinksPaidReport.prefetch = (
            client: QueryClient,
            queryParams: GetLinksPaidReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetLinksPaidReport.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get time-based report of links generated by users, who are introduced by current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetLinksReport = (
           queryParams: GetLinksReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetLinksReport.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetLinksReport.info = (queryParams: GetLinksReportQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getLinksReport.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getLinksReport(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetLinksReport.prefetch = (
            client: QueryClient,
            queryParams: GetLinksReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetLinksReport.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetPermittedsubusers = (
           userWalletId: number,options?:InternalUseQueryOptions<AccountPermittedSubUserQuery[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetPermittedsubusers.info( userWalletId,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetPermittedsubusers.info = (userWalletId: number,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getPermittedsubusers.key,userWalletId,
            
            
            ] as QueryKey,
                fun: () =>
                getPermittedsubusers(
                   userWalletId,
          
          
          
                  configOverride
                ),
              };
            };useGetPermittedsubusers.prefetch = (
            client: QueryClient,
            userWalletId: number,options?:InternalUseQueryOptions<AccountPermittedSubUserQuery[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetPermittedsubusers.info( userWalletId,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * [Deprecated, use 'account/{accountNumber}/qrcode' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetQrByaccountNumber = (
           accountNumber: string,queryParams: GetQrByaccountNumberQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetQrByaccountNumber.info( accountNumber,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetQrByaccountNumber.info = (accountNumber: string,queryParams: GetQrByaccountNumberQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getQrByaccountNumber.key,accountNumber,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getQrByaccountNumber(
                   accountNumber,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetQrByaccountNumber.prefetch = (
            client: QueryClient,
            accountNumber: string,queryParams: GetQrByaccountNumberQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetQrByaccountNumber.info( accountNumber,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get QR code image file for epay request
 */
export const useGetQrcode = (
           
/**
 * 
 * epay request token
 */
epayToken: string,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetQrcode.info( epayToken,
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetQrcode.info = (
/**
 * 
 * epay request token
 */
epayToken: string,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getQrcode.key,epayToken,
            
            
            ] as QueryKey,
                fun: () =>
                getQrcode(
                   epayToken,
          
          
          
                  configOverride
                ),
              };
            };useGetQrcode.prefetch = (
            client: QueryClient,
            
/**
 * 
 * epay request token
 */
epayToken: string,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetQrcode.info( epayToken,
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetQrcode = (
           accountNumber: string,queryParams: GetQrcodeQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetQrcode.info( accountNumber,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetQrcode.info = (accountNumber: string,queryParams: GetQrcodeQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getQrcode.key,accountNumber,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getQrcode(
                   accountNumber,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetQrcode.prefetch = (
            client: QueryClient,
            accountNumber: string,queryParams: GetQrcodeQueryParams,options?:InternalUseQueryOptions<string>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetQrcode.info( accountNumber,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetRecent = (
           options?:InternalUseQueryOptions<ContactApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetRecent.info( 
          
          
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetRecent.info = (configOverride?:AxiosRequestConfig) => {
              return {
                key: [getRecent.key,
            
            
            ] as QueryKey,
                fun: () =>
                getRecent(
                   
          
          
          
                  configOverride
                ),
              };
            };useGetRecent.prefetch = (
            client: QueryClient,
            options?:InternalUseQueryOptions<ContactApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetRecent.info( 
          
          
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetReport = (
           queryParams: GetReportQueryParams,options?:InternalUseQueryOptions<ReportApiModel[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetReport.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetReport.info = (queryParams: GetReportQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getReport.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getReport(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetReport.prefetch = (
            client: QueryClient,
            queryParams: GetReportQueryParams,options?:InternalUseQueryOptions<ReportApiModel[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetReport.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const useGetSettlementRequestComission = (
           userWalletId: number,queryParams: GetSettlementRequestComissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetSettlementRequestComission.info( userWalletId,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetSettlementRequestComission.info = (userWalletId: number,queryParams: GetSettlementRequestComissionQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getSettlementRequestComission.key,userWalletId,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getSettlementRequestComission(
                   userWalletId,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetSettlementRequestComission.prefetch = (
            client: QueryClient,
            userWalletId: number,queryParams: GetSettlementRequestComissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetSettlementRequestComission.info( userWalletId,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get count of all commission transactions, paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetTransactionsCount = (
           queryParams: GetTransactionsCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetTransactionsCount.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetTransactionsCount.info = (queryParams: GetTransactionsCountQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getTransactionsCount.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getTransactionsCount(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetTransactionsCount.prefetch = (
            client: QueryClient,
            queryParams: GetTransactionsCountQueryParams,options?:InternalUseQueryOptions< & (AggregationApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetTransactionsCount.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * 
 * Get time-based report of commission transactions, paid to current Reseller user
[Feature just allowed for Resellers]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetTransactionsReport = (
           queryParams: GetTransactionsReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetTransactionsReport.info( 
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetTransactionsReport.info = (queryParams: GetTransactionsReportQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getTransactionsReport.key,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getTransactionsReport(
                   
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetTransactionsReport.prefetch = (
            client: QueryClient,
            queryParams: GetTransactionsReportQueryParams,options?:InternalUseQueryOptions<DateReportApiModelOfInteger[]>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetTransactionsReport.info( 
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const useGetTransferMoneyCommission = (
           userWalletId: number,queryParams: GetTransferMoneyCommissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig
           ) => {
          const { key, fun } = useGetTransferMoneyCommission.info( userWalletId,
          
          queryParams,
           configOverride);
          return useQuery(key,()=>
                fun(),
                options
               )  
          }
        useGetTransferMoneyCommission.info = (userWalletId: number,queryParams: GetTransferMoneyCommissionQueryParams,configOverride?:AxiosRequestConfig) => {
              return {
                key: [getTransferMoneyCommission.key,userWalletId,
            
            queryParams,
            ] as QueryKey,
                fun: () =>
                getTransferMoneyCommission(
                   userWalletId,
          
          queryParams,
          
                  configOverride
                ),
              };
            };useGetTransferMoneyCommission.prefetch = (
            client: QueryClient,
            userWalletId: number,queryParams: GetTransferMoneyCommissionQueryParams,options?:InternalUseQueryOptions< & (CommissionAmountApiModel)>,configOverride?:AxiosRequestConfig) => {
                const { key, fun } = useGetTransferMoneyCommission.info( userWalletId,
          
          queryParams,
           configOverride);

                return client.getQueryData(key)
                ? Promise.resolve()
                : client.prefetchQuery(
                    key,
                    ()=>fun(),
                    options
                  );
              }
      export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (RegisterNewUserQuery), {requestBody: RegisterApiModel,headerParams: {\\"platformType\\": \\"Unknown\\" | \\"Server\\" | \\"Android\\" | \\"iOS\\" | \\"Device\\" | \\"Browser\\" | \\"PWA\\" | \\"Web\\" | \\"Windows\\" | \\"Linux\\" | \\"macOS\\" | \\"Desktop\\";},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Recover forgotten password with phone number (Two factor authentication)
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (ForgetPasswordQuery), {requestBody: UserForgetPasswordInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Send a connection request to sub user
[Feature just allowed for the business users]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {requestBody: SendConnectionRequestInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (EpayRequestDetailApiModel), {
/**
 * 
 * User Wallet id
 */
userWalletId: number,requestBody: RequestBodyNewEpayRequestInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Upload new file
[Allowed files are images and pdf / Max Size: 3 MB]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (FileApiModel), {requestBody: RequestBodyFile_Upload,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * [for Business users only]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions<GroupTransferTargetValidationQuery[], {requestBody: RequestBodyFile_Upload,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * [for Business users only]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: GroupTransferTargetValidationQuery[],}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * [for Business users only]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (GroupTransferQuery), {requestBody: GroupTransferInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Pay taxi fair amount
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (TaxiRecieptApiDto), {requestBody: ClientPurchaseInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (MachineSignUp), {requestBody: FullRegisterApiModel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Create an new [EpayRequest] with the given model.
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (EpayRequestWcfResult), {requestBody: EpayRequestServiceInput,headerParams: {\\"apiKey\\": string;
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Check the [EpayRequest] based on token
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (EpayRequestCheckStatusResult), {requestBody: string,headerParams: {\\"apiKey\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Verify the ApiKey for authorizing the [User]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions<boolean, {headerParams: {\\"apiKey\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Create a Divided [EpayRequest] for the given model.
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (EpayRequestWcfResult), {requestBody: DivideEpayRequestServiceInput,headerParams: {\\"apiKey\\": string;
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Unblock Amount of an Divided[EpayRequest]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (DividedEpayRequestUnblockResult), {requestBody: DividedEpayRequestUnblockInput,headerParams: {\\"apiKey\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Cancel Amount of an Divided[EpayRequest]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (DividedEpayRequestCancelResult), {requestBody: DividedEpayRequestCancelInput,headerParams: {\\"apiKey\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Set [EPayRequest] status to 'Cancel' and cancel the payment
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions<boolean, {requestBody: string,headerParams: {\\"apiKey\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (InitApiModel), {headerParams: {
/**
 * 
 * - Format: guid
 */
\\"terminalId\\": string;\\"terminalVersion\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          
          
          headerParams, configOverride } = _o || {};

            return post(
                 
          
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Transfer money
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (TransferMoneyApiModel), {userWalletId: number,requestBody: RequestBodyTransferMoneyInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Create a new user bank
[Feature is not allowed for sub users]
[Needs secure login]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (UserBankApiModel), {requestBody: RequestBodyUserBankInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Change user password
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: UserChangePasswordInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Create a new national id verification request [Feature is allowed for normal users noly]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (UserDetailQuery), {requestBody: NewUserIdentityRequestInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Request for upgrade account to the business [Feature is allowed for normal users only]
 */
export const usePost =<TExtra> (
           options?:InternalUseMutationOptions< & (UpgradeToBusinessApiModel), {requestBody: UpgradeToBusinessUserInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePost =<TExtra> (
           options?:InternalUseMutationOptions<number, {requestBody: RequestBodyAccountCreationApiModel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return post(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Set basic data for your registration [fullname, password]
 */
export const usePostBasic =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: SetUserBasicInfoInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postBasic(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Set access to the account for sub user
[Feature just allowed for the business users]
[Needs secure login]
 */
export const usePostByconnectionIdPermission =<TExtra> (
           options?:InternalUseMutationOptions<string, {
/**
 * 
 * Connection Id
 */
connectionId: number,requestBody: SetAccountAccessForSubUserInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,
          requestBody,
          
           configOverride } = _o || {};

            return postByconnectionIdPermission(
                 connectionId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Resend Connection Request to Sub-User
[Feature just allowed for the business users]
[Deprecated, use 'businessuser/invite/{invitationId}/resend' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const usePostByinvitationId =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {
/**
 * 
 * Invitation Id
 */
invitationId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationId,
          
          
           configOverride } = _o || {};

            return postByinvitationId(
                 invitationId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Resend Connection Request to Sub-User
[Feature just allowed for the business users]
 */
export const usePostByinvitationIdResend =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {
/**
 * 
 * Invitation Id
 */
invitationId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationId,
          
          
           configOverride } = _o || {};

            return postByinvitationIdResend(
                 invitationId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Create a new task for executing the actions of the business user invitation [Accept/Reject]
[Feature is not allowed for sub users]
[Deprecated, use 'user/invitation/{invitationToken}/accept' and 'user/invitation/{invitationToken}/reject' instead.]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const usePostByinvitationIdTask =<TExtra> (
           options?:InternalUseMutationOptions<string, {
/**
 * 
 * invitation id
 */
invitationId: number,requestBody: SubuserInvitationTaskInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationId,
          requestBody,
          
           configOverride } = _o || {};

            return postByinvitationIdTask(
                 invitationId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * accept an Invitation and cerate a SubUserConnection.
[Feature is not allowed for sub users]
 */
export const usePostByinvitationTokenAccept =<TExtra> (
           options?:InternalUseMutationOptions<string, {
/**
 * 
 * invitation token
 */
invitationToken: string,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationToken,
          
          
           configOverride } = _o || {};

            return postByinvitationTokenAccept(
                 invitationToken,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * reject an Invitation.
[Feature is not allowed for sub users]
 */
export const usePostByinvitationTokenReject =<TExtra> (
           options?:InternalUseMutationOptions<string, {
/**
 * 
 * invitation token
 */
invitationToken: string,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { invitationToken,
          
          
           configOverride } = _o || {};

            return postByinvitationTokenReject(
                 invitationToken,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Pay POS link Online
 */
export const usePostBytargetAccountNumberOnline =<TExtra> (
           options?:InternalUseMutationOptions< & (EpayRequestDetailApiModel), {
/**
 * 
 * Target account number
 */
targetAccountNumber: string,requestBody: PosOnlinePayInput,headerParams: {
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { targetAccountNumber,
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return postBytargetAccountNumberOnline(
                 targetAccountNumber,
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Pay POS link with Wallet
 */
export const usePostBytargetAccountNumberWallet =<TExtra> (
           options?:InternalUseMutationOptions< & (WalletReceiptApiModel), {
/**
 * 
 * Target account number
 */
targetAccountNumber: string,requestBody: PosWalletPayInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { targetAccountNumber,
          requestBody,
          
           configOverride } = _o || {};

            return postBytargetAccountNumberWallet(
                 targetAccountNumber,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const usePostByuserWalletId =<TExtra> (
           options?:InternalUseMutationOptions<string, {
/**
 * 
 * UserWallet's Id
 */
userWalletId: number,requestBody: RequestBodySubUserNotificationStatusInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return postByuserWalletId(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostByuserWalletIdNotification =<TExtra> (
           options?:InternalUseMutationOptions<string, {
/**
 * 
 * UserWallet's Id
 */
userWalletId: number,requestBody: RequestBodySubUserNotificationStatusInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return postByuserWalletIdNotification(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostCancel =<TExtra> (
           options?:InternalUseMutationOptions<string, {epayId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { epayId,
          
          
           configOverride } = _o || {};

            return postCancel(
                 epayId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostCharge =<TExtra> (
           options?:InternalUseMutationOptions< & (NewChargeRequestResultQuery), {userWalletId: number,requestBody: NewChargeRequestInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return postCharge(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const usePostEpayRequest =<TExtra> (
           options?:InternalUseMutationOptions< & (EpayRequestDetailApiModel), {userWalletId: number,requestBody: RequestBodyNewEpayRequestInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return postEpayRequest(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostLog =<TExtra> (
           options?:InternalUseMutationOptionsVoid<string, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          
          
           configOverride } = _o || {};

            return postLog(
                 
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostOtpGenerate =<TExtra> (
           options?:InternalUseMutationOptions< & (TotpLoginResult), {requestBody: RequestTotpInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postOtpGenerate(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostPayByuserWalletId =<TExtra> (
           options?:InternalUseMutationOptions< & (WalletReceiptApiModel), {epayToken: string,userWalletId: number,requestBody: EpayRequestPayInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { epayToken,userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return postPayByuserWalletId(
                 epayToken,userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostResend =<TExtra> (
           options?:InternalUseMutationOptions<string, {epayId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { epayId,
          
          
           configOverride } = _o || {};

            return postResend(
                 epayId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostSwitch =<TExtra> (
           options?:InternalUseMutationOptions< & (SettingApiModel), {requestBody: RequestBodyLogEventLevel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postSwitch(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostSwitchSeptapay =<TExtra> (
           options?:InternalUseMutationOptions< & (SettingApiModel), {requestBody: RequestBodyLogEventLevel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postSwitchSeptapay(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostSwitchSerilog =<TExtra> (
           options?:InternalUseMutationOptions< & (SettingApiModel), {requestBody: RequestBodyLogEventLevel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postSwitchSerilog(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Create a new task for executing the actions of epay request [Resend/Cancel]
[Deprecated, use 'epayrequest/{id}/cancel' and 'epayrequest/{id}/resend' instead]
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const usePostTask =<TExtra> (
           options?:InternalUseMutationOptions<string, {epayId: number,requestBody: EpayRequestTaskInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { epayId,
          requestBody,
          
           configOverride } = _o || {};

            return postTask(
                 epayId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * @deprecated This endpoint deprecated and will be remove. Please use an alternative
 */
export const usePostTransferMoney =<TExtra> (
           options?:InternalUseMutationOptions< & (TransferMoneyApiModel), {userWalletId: number,requestBody: RequestBodyTransferMoneyInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return postTransferMoney(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Confirm the phone number with verification code
 */
export const usePostVerify =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: VerifyPhoneNumberInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postVerify(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Confirm the phone number with a verification code for recover password
 */
export const usePostVerify =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: UserVerifyForgetPasswordInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return postVerify(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePostVersion =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: TerminalVersionApiModel,headerParams: {
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;},}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
          headerParams, configOverride } = _o || {};

            return postVersion(
                 
          requestBody,
          
          headerParams, configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * [for Business users only]
 */
export const usePut =<TExtra> (
           options?:InternalUseMutationOptions< & (GroupTransferTargetValidationQuery), {requestBody: GroupTransferTargetValidationInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return put(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Update the SubDomain of current Reseller user
[Feature just allowed for Resellers]
 */
export const usePut =<TExtra> (
           options?:InternalUseMutationOptions< & (SubDomainApiModel), {requestBody: SubDomainUpdateApiModel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return put(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Edit user bank
[Needs secure login]
 */
export const usePut =<TExtra> (
           options?:InternalUseMutationOptions< & (UserBankApiModel), {
/**
 * 
 * User bank id
 */
userBankId: number,requestBody: RequestBodyUserBankInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userBankId,
          requestBody,
          
           configOverride } = _o || {};

            return put(
                 userBankId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Edit profile [state, city, address]
[Feature is not allowed for business users]
[Needs secure login]
 */
export const usePut =<TExtra> (
           options?:InternalUseMutationOptions< & (UserDetailQuery), {requestBody: UserProfileInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return put(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Change user avatar
[Needs secure login]
 */
export const usePut =<TExtra> (
           options?:InternalUseMutationOptions<string, {requestBody: UserProfileAvatarInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { 
          requestBody,
          
           configOverride } = _o || {};

            return put(
                 
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePut =<TExtra> (
           options?:InternalUseMutationOptions< & (WalletDisplayApiModel), {userWalletId: number,requestBody: RequestBodyAccountCreationApiModel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return put(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Change sub user connection info
[Feature just allowed for the business users]
[Needs secure login]
 */
export const usePutByconnectionId =<TExtra> (
           options?:InternalUseMutationOptions< & (SubUserConnectionApiModel), {
/**
 * 
 * Connection Id
 */
connectionId: number,requestBody: EditConnectionInfoInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,
          requestBody,
          
           configOverride } = _o || {};

            return putByconnectionId(
                 connectionId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePutByconnectionIdPermissionByuserWalletId =<TExtra> (
           options?:InternalUseMutationOptions<string, {connectionId: number,
/**
 * 
 * Id of Account to edit it's permissios
 */
userWalletId: number,requestBody: EditSubUserPermissionInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { connectionId,userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return putByconnectionIdPermissionByuserWalletId(
                 connectionId,userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Dismiss an Important Action forever.
 */
export const usePutBynotifIdDismiss =<TExtra> (
           options?:InternalUseMutationOptions<string, {notifId: number,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { notifId,
          
          
           configOverride } = _o || {};

            return putBynotifIdDismiss(
                 notifId,
          
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePutChangeStatus =<TExtra> (
           options?:InternalUseMutationOptions< & (UserPluginApiModel), {userPluginId: number,requestBody: UserPluginTogggleApiModel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userPluginId,
          requestBody,
          
           configOverride } = _o || {};

            return putChangeStatus(
                 userPluginId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      
/**
 * 
 * Change user bank show-in-list property
[Needs secure login]
 */
export const usePutChangeVisibility =<TExtra> (
           options?:InternalUseMutationOptions<string, {userBankId: number,requestBody: UserBankChangeVisibilityInput,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userBankId,
          requestBody,
          
           configOverride } = _o || {};

            return putChangeVisibility(
                 userBankId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        
      export const usePutNotification =<TExtra> (
           options?:InternalUseMutationOptions<string, {userWalletId: number,requestBody: AccountSettingNotificationStatusApiModel,}, TExtra>,
           ) => {return useMutation((_o)=>{
            const { userWalletId,
          requestBody,
          
           configOverride } = _o || {};

            return putNotification(
                 userWalletId,
          requestBody,
          
           configOverride,
              )
          },
          options
         )  
          }
        "
`;

exports[`generate generate type 1`] = `
"
/**
* AUTO_GENERATED Do not change this file directly, rerun the yarn vigo-swag-ts command*/
 
        
        export interface AccountBalanceApiModel {
/**
 * 
 * - Format: decimal
 */
\\"realBalance\\": number;
/**
 * 
 * - Format: decimal
 */
\\"totalBalance\\": number;}
         
        
        export interface AccountCreationApiModel {\\"automaticSettlement\\"?: boolean;\\"getComissionFromPayer\\"?: boolean;\\"isActive\\"?: boolean;\\"title\\"?: string;
/**
 * 
 * - Format: int32
 */
\\"userBankId\\"?: number;}
         
        
        export interface AccountInfoApiModel {
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\": number;\\"accountOwnerAvatarUrl\\"?: string;\\"accountOwnerTitle\\"?: string;}
         
        
        export interface AccountPermittedSubUserQuery {
/**
 * 
 * - Format: int64
 */
\\"connectionId\\": number;\\"connectionStatus\\": SubUserConnectionStatus;
/**
 * 
 * [Deprecated, use 'ConnectionStatus' instead]
 * @deprecated Use 'ConnectionStatus' instead.
 */
\\"subUserConnectionStatus\\":  & (SubUserConnectionStatus);
/**
 * 
 * - Format: guid
 */
\\"subuserId\\": string;\\"subuserStatus\\": SubuserStatus;\\"connectDate\\"?: string;\\"connectionStatusDisplay\\"?: string;\\"disconnectDate\\"?: string;\\"subUserAvatarUrl\\"?: string;\\"subUserContact\\"?: string;\\"subUserPositionTitle\\"?: string;\\"subUserTitle\\"?: string;\\"subuserStatusDisplay\\"?: string;}
         
        
        export interface AccountSettingNotificationStatusApiModel {\\"notificationEnabled\\": boolean;}
         
        
        export enum AccountStatus {Block=\\"Block\\",OK=\\"OK\\"}
         
        
        export interface AggregationApiModel {
/**
 * 
 * - Format: int32
 */
\\"count\\": number;
/**
 * 
 * - Format: decimal
 */
\\"sum\\": number;}
         
        
        export interface AllTransactionsReportApiModel {\\"credits\\"?: ReportApiModel[];\\"debits\\"?: ReportApiModel[];}
         
        
        export interface BankApiModel {
/**
 * 
 * - Format: int32
 */
\\"id\\": number;\\"logoUrl\\"?: string;\\"name\\"?: string;}
         
        
        export interface BankReceiptApiModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"commissionAmount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDate\\": string;\\"failed\\": boolean;\\"type\\": EpayRequestType;\\"createDateDisplay\\"?: string;\\"creatorUserAvatarUrl\\"?: string;\\"creatorUserDisplayName\\"?: string;\\"description\\"?: string;\\"failureMessage\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"operationId\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"payerAccountId\\"?: number;\\"payerAccountName\\"?: string;\\"payerAccountNumber\\"?: string;\\"shareUrl\\"?: string;\\"targetAccountNumber\\"?: string;\\"targetAvatarUrl\\"?: string;\\"targetUserDisplayName\\"?: string;\\"typeDisplay\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"voucherId\\"?: number;}
         
        
        export interface BusinessCategoryApiModel {\\"id\\": BusinessType;\\"title\\"?: string;}
         
        
        export enum BusinessShareType {Person=\\"Person\\",PrivateStock=\\"PrivateStock\\",PublicStock=\\"PublicStock\\",Limited=\\"Limited\\",GeneralPartnership=\\"GeneralPartnership\\",Institute=\\"Institute\\",Cooperative=\\"Cooperative\\"}
         
        
        export enum BusinessType {Ads=\\"Ads\\",Investment=\\"Investment\\",Production=\\"Production\\",Trade=\\"Trade\\",Software=\\"Software\\"}
         
        
        export interface BusinessUserConnectionApiModel {
/**
 * 
 * - Format: guid
 */
\\"businessId\\": string;\\"status\\": SubUserConnectionStatus;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead.
 */
\\"subUserConnectionStatus\\":  & (SubUserConnectionStatus);\\"businessAvatarUrl\\"?: string;\\"businessName\\"?: string;\\"connectDate\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"connectDateTime\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"connectionId\\"?: number;\\"disconnectDate\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"disconnectDateTime\\"?: string;\\"positionTitle\\"?: string;\\"statusDisplay\\"?: string;}
         
        
        export enum CallbackType {None=\\"None\\",Redirect=\\"Redirect\\",RedirectWithPost=\\"RedirectWithPost\\",Call=\\"Call\\"}
         
        
        export interface ClientPurchaseInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: int32
 */
\\"instituteCode\\": number;
/**
 * 
 * - Format: int32
 */
\\"userWalletId\\": number;\\"driverCode\\"?: string;}
         
        
        export enum ComissionType {Percentage=\\"Percentage\\",Fixed=\\"Fixed\\"}
         
        
        export interface CommissionAmountApiModel {
/**
 * 
 * [Deprecated, use 'CommissionAmount' instead]
 * - Format: decimal
 * @deprecated Use CommissionAmount instead.
 */
\\"comissionAmount\\": number;
/**
 * 
 * کارمزد
 * - Format: decimal
 */
\\"commissionAmount\\": number;
/**
 * 
 * مبلغ اصلی
 * - Format: decimal
 */
\\"requestAmount\\": number;
/**
 * 
 * جمع مبلغ اصلی و کارمزد
 * - Format: decimal
 */
\\"totalAmount\\": number;}
         
        
        export interface CommissionPolicyApiModel {\\"commissionType\\": ComissionType;\\"logicalAction\\": LogicalActionType;\\"commissionTypeDisplay\\"?: string;
/**
 * 
 * - Format: decimal
 */
\\"fixedValue\\"?: number;\\"logicalActionDisplay\\"?: string;
/**
 * 
 * - Format: decimal
 */
\\"maxValue\\"?: number;
/**
 * 
 * - Format: double
 */
\\"percent\\"?: number;\\"title\\"?: string;\\"value\\"?: string;}
         
        
        export interface ContactApiModel {\\"audienceType\\": UserIdentifierType;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"audienceTypeDisplay\\"?: string;\\"contact\\"?: string;\\"fullName\\"?: string;\\"userDisplayName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"userId\\"?: string;\\"userProfileImageLink\\"?: string;}
         
        
        export enum DatePart {Minute=\\"Minute\\",Hour=\\"Hour\\",Day=\\"Day\\",Week=\\"Week\\",Month=\\"Month\\",Year=\\"Year\\",All=\\"All\\"}
         
        
        export interface DateReportApiModelOfDecimal {
/**
 * 
 * - Format: int32
 */
\\"day\\": number;
/**
 * 
 * - Format: int32
 */
\\"key\\": number;
/**
 * 
 * - Format: int32
 */
\\"month\\": number;
/**
 * 
 * - Format: decimal
 */
\\"value\\": number;
/**
 * 
 * - Format: int32
 */
\\"year\\": number;\\"dayName\\"?: string;\\"label\\"?: string;\\"monthName\\"?: string;}
         
        
        export interface DateReportApiModelOfInteger {
/**
 * 
 * - Format: int32
 */
\\"day\\": number;
/**
 * 
 * - Format: int32
 */
\\"key\\": number;
/**
 * 
 * - Format: int32
 */
\\"month\\": number;
/**
 * 
 * - Format: int32
 */
\\"value\\": number;
/**
 * 
 * - Format: int32
 */
\\"year\\": number;\\"dayName\\"?: string;\\"label\\"?: string;\\"monthName\\"?: string;}
         
        
        export interface DeleteByinvitationIdRemoveQueryParams {
/**
 * 
 * - Format: int64
 */
\\"id\\"?: number;}
         
        
        export interface DivideEpayRequestServiceInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"expiresAfterDays\\": number;
/**
 * 
 * - Format: date-time
 */
\\"invoiceDate\\": string;\\"isAutoRedirect\\": boolean;\\"isBlocking\\": boolean;\\"callBackUrl\\"?: string;\\"description\\"?: string;\\"divisions\\"?: DivideEpayRequestShareModel[];\\"invoiceNumber\\"?: string;}
         
        
        export interface DivideEpayRequestShareModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"dividerAmount\\": number;\\"apiKey\\"?: string;\\"invoiceNumber\\"?: string;}
         
        
        export interface DividedEpayRequestCancelInput {
/**
 * 
 * - Format: decimal
 */
\\"dividerAmount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"userAmount\\": number;\\"description\\"?: string;\\"firstName\\"?: string;\\"invoiceNumber\\"?: string;\\"lastName\\"?: string;\\"paymentToken\\"?: string;\\"shebaNo\\"?: string;\\"userApiKey\\"?: string;}
         
        
        export interface DividedEpayRequestCancelResult {
/**
 * 
 * - Format: decimal
 */
\\"cancelledAmount\\": number;}
         
        
        export interface DividedEpayRequestUnblockInput {
/**
 * 
 * - Format: decimal
 */
\\"dividerAmount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"userAmount\\": number;\\"description\\"?: string;\\"invoiceNumber\\"?: string;\\"paymentToken\\"?: string;\\"userApiKey\\"?: string;}
         
        
        export interface DividedEpayRequestUnblockResult {
/**
 * 
 * - Format: decimal
 */
\\"unblockedAmount\\": number;}
         
        
        export interface DocumentApiModel {\\"contentType\\": DocumentContentType;
/**
 * 
 * - Format: date-time
 */
\\"createDate\\": string;
/**
 * 
 * [Deprecated, use 'ContentType' instead]
 * @deprecated Use 'ContentType' instead.
 */
\\"documentContentType\\":  & (DocumentContentType);
/**
 * 
 * - Format: int64
 */
\\"fileSize\\": number;\\"fileType\\": FileTypes;
/**
 * 
 * [Deprecated, use 'FileType' instead]
 * @deprecated Use 'FileType' instead.
 */
\\"fileTypes\\":  & (FileTypes);
/**
 * 
 * - Format: guid
 */
\\"uniqueId\\": string;\\"contentTypeDisplay\\"?: string;\\"fileName\\"?: string;\\"fileTypeDisplay\\"?: string;\\"fileUrl\\"?: string;}
         
        
        export enum DocumentContentType {Other=\\"Other\\",UserBankVerification=\\"UserBankVerification\\",IdentityCard=\\"IdentityCard\\",BusinessStatute=\\"BusinessStatute\\",BusinessLatestChangesAnnouncement=\\"BusinessLatestChangesAnnouncement\\",BusinessOwnersIdentityCards=\\"BusinessOwnersIdentityCards\\",BusinessOwnersBirthCertificates=\\"BusinessOwnersBirthCertificates\\"}
         
        
        export interface DocumentInput {\\"documentContentType\\": DocumentContentType;
/**
 * 
 * - Format: guid
 */
\\"fileUniqueId\\": string;}
         
        
        export interface DriverInfoResult {\\"barcodType\\": number;\\"barcodTypeDescription\\"?: string;\\"customData\\"?:  & (TaxiInfoOutput);\\"firstName\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"identificationCode\\"?: number;\\"identificationDesc\\"?: string;\\"imageUrl\\"?: string;\\"lastName\\"?: string;\\"nationalCode\\"?: string;\\"price\\"?: TaxiPriceOutput[];}
         
        
        export interface DropDownResultItemOfIdentityStatus {\\"value\\": IdentityStatus;\\"display\\"?: string;}
         
        
        export interface DropDownResultOfIdentityStatus {\\"items\\"?: DropDownResultItemOfIdentityStatus[];}
         
        
        export interface EPayPluginSpecificApiModel {\\"id\\"?: string;\\"persianName\\"?: string;
/**
 * 
 * [Deprecated, don't use this property anymore, it is always null]
 * @deprecated Don't use this property anymore, it is always null.
 */
\\"pluginPropertyId\\"?: string;
/**
 * 
 * [Deprecated, use 'Id' instead]
 * @deprecated Use 'Id' instead.
 */
\\"pluginPropertyName\\"?: string;
/**
 * 
 * [Deprecated, use 'PersianName' instead]
 * @deprecated Use 'PersianName' instead.
 */
\\"pluginPropertyPersianName\\"?: string;\\"value\\"?: string;}
         
        
        export interface EPayRequestAudienceInput {\\"contact\\"?: string;\\"fullName\\"?: string;}
         
        
        export interface EditConnectionInfoInput {\\"position\\"?: string;}
         
        
        export interface EditSubUserPermissionInput {\\"isEnabled\\"?: boolean;\\"subUserPermissionType\\"?:  & (SubUserPermissionType);}
         
        
        export enum EpayRequestActualState {Initiated=\\"Initiated\\",Paid=\\"Paid\\",Cancelled=\\"Cancelled\\",Expired=\\"Expired\\"}
         
        
        export interface EpayRequestApiModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDateTime\\": string;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead.
 */
\\"epayRequestStatus\\":  & (EpayRequestStatus);
/**
 * 
 * - Format: date-time
 */
\\"expireDateTime\\": string;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"status\\": EpayRequestActualState;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\": number;\\"assistantDisplayName\\"?: string;\\"assistantPositionTitle\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"assistantUserId\\"?: string;\\"createDate\\"?: string;\\"description\\"?: string;
/**
 * 
 * [Deprecated, don't use EpayRequestAudience]
 * @deprecated Don't use EpayRequestAudience.
 */
\\"epayRequestAudience\\"?: EPayRequestAudienceInput[];\\"expireDate\\"?: string;\\"payDate\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"payDateTime\\"?: string;\\"payerName\\"?: string;\\"paymentLink\\"?: string;\\"qrCodeLink\\"?: string;\\"statusDisplay\\"?: string;\\"targetDisplayName\\"?: string;\\"userAccountName\\"?: string;}
         
        
        export interface EpayRequestCheckStatusResult {\\"requestStatus\\": EpayRequestStatus;\\"bankReferenceId\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"verifyDate\\"?: string;}
         
        
        export interface EpayRequestDetailApiModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * [Deprecated, use 'CommissionAmount' instead]
 * - Format: decimal
 * @deprecated Use 'CommissionAmount' instead.
 */
\\"comissionAmount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"commissionAmount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDateTime\\": string;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead.
 */
\\"epayRequestStatus\\":  & (EpayRequestStatus);
/**
 * 
 * - Format: date-time
 */
\\"expireDateTime\\": string;
/**
 * 
 * [Deprecated, use 'GetCommissionFromPayer' instead]
 * @deprecated Use 'GetCommissionFromPayer' instead.
 */
\\"getComissionByPayer\\": boolean;\\"getCommissionFromPayer\\": boolean;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"status\\": EpayRequestActualState;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\": number;\\"assistantDisplayName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"assistantUserId\\"?: string;\\"audiences\\"?: ContactApiModel[];\\"description\\"?: string;
/**
 * 
 * [Deprecated, use 'Audiences' instead]
 * @deprecated Use 'Audiences' instead.
 */
\\"epayRequestAudience\\"?: ContactApiModel[];
/**
 * 
 * [Deprecated, use 'PluginProperties' instead]
 * @deprecated Use 'PluginProperties' instead.
 */
\\"epayRequestPluginSpecific\\"?: EPayPluginSpecificApiModel[];
/**
 * 
 * - Format: date-time
 */
\\"payDateTime\\"?: string;\\"paymentLink\\"?: string;
/**
 * 
 * - Format: int32
 */
\\"pluginId\\"?: number;\\"pluginName\\"?: string;\\"pluginProperties\\"?: EPayPluginSpecificApiModel[];\\"publicLink\\"?: string;\\"qrCodeLink\\"?: string;\\"statusDisplay\\"?: string;\\"token\\"?: string;\\"userAccountName\\"?: string;}
         
        
        export interface EpayRequestForUserQuery {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * [Deprecated, don't use this property anymore]
 * @deprecated Don't use this property anymore.
 */
\\"canBeCanceled\\": boolean;
/**
 * 
 * - Format: date-time
 */
\\"createDateTime\\": string;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead.
 */
\\"epayRequestStatus\\":  & (EpayRequestStatus);
/**
 * 
 * - Format: date-time
 */
\\"expireDateTime\\": string;
/**
 * 
 * [Deprecated, use 'Token' for EPays that created by others]
 * - Format: int64
 * @deprecated Use 'Token' for EPays that created by others.
 */
\\"id\\": number;\\"status\\": EpayRequestActualState;
/**
 * 
 * [Deprecated, use 'UserDisplayName' instead]
 * @deprecated Use 'UserDisplayName' instead.
 */
\\"applicantName\\"?: string;\\"createDate\\"?: string;\\"description\\"?: string;\\"expireDate\\"?: string;\\"paymentUrl\\"?: string;\\"statusDisplay\\"?: string;\\"token\\"?: string;\\"userAccountNumber\\"?: string;\\"userDisplayName\\"?: string;}
         
        
        export interface EpayRequestPayInput {\\"description\\"?: string;}
         
        
        export interface EpayRequestPluginSpecificInput {\\"pluginPropertyId\\"?: string;\\"value\\"?: string;}
         
        
        export interface EpayRequestPublicInfoApiModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"expireDate\\": string;\\"status\\": EpayRequestStatus;\\"description\\"?: string;\\"expireDateDisplay\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"payDate\\"?: string;\\"payDateDisplay\\"?: string;\\"payerName\\"?: string;\\"paymentUrl\\"?: string;\\"statusDisplay\\"?: string;\\"token\\"?: string;\\"userAccountNumber\\"?: string;\\"userAvatarUrl\\"?: string;\\"userDisplayName\\"?: string;}
         
        
        export interface EpayRequestServiceInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"callbackType\\": CallbackType;
/**
 * 
 * - Format: guid
 */
\\"clientId\\": string;
/**
 * 
 * - Format: int32
 */
\\"domainId\\": number;
/**
 * 
 * - Format: int32
 */
\\"expiresAfterDays\\": number;\\"getComissionFromPayer\\": boolean;
/**
 * 
 * - Format: date-time
 */
\\"invoiceDate\\": string;\\"isAutoConfirm\\": boolean;\\"isAutoRedirect\\": boolean;
/**
 * 
 * - Format: int64
 */
\\"userAccountId\\": number;
/**
 * 
 * - Format: guid
 * - minLength: 1
 */
\\"userId\\": string;\\"audiences\\"?: EPayRequestAudienceInput[];\\"callbackUrl\\"?: string;\\"description\\"?: string;\\"invoiceNumber\\"?: string;}
         
        
        export enum EpayRequestStatus {Initiated=\\"Initiated\\",Paid=\\"Paid\\",Cancelled=\\"Cancelled\\",Expired=\\"Expired\\",Viewed=\\"Viewed\\"}
         
        
        export interface EpayRequestTaskInput {\\"epayRequestTaskType\\": EpayRequestTaskType;}
         
        
        export enum EpayRequestTaskType {Resend=\\"Resend\\",Cancel=\\"Cancel\\"}
         
        
        export enum EpayRequestType {Link=\\"Link\\",POS=\\"POS\\",Divide=\\"Divide\\",DivideWithBlock=\\"DivideWithBlock\\",Charge=\\"Charge\\",IPG=\\"IPG\\"}
         
        
        export interface EpayRequestWcfResult {\\"paymentUrl\\"?: string;\\"requestToken\\"?: string;}
         
        
        export enum FieldDisplayType {String=\\"String\\",Text=\\"Text\\",Currency=\\"Currency\\",Integer=\\"Integer\\",Float=\\"Float\\",Boolean=\\"Boolean\\",List=\\"List\\"}
         
        
        export interface FileApiModel {
/**
 * 
 * - Format: int64
 */
\\"fileSize\\": number;
/**
 * 
 * - Format: guid
 */
\\"uniqueId\\": string;\\"fileName\\"?: string;\\"fileUrl\\"?: string;}
         
        
        export enum FileTypes {Other=\\"Other\\",Image=\\"Image\\",Pdf=\\"Pdf\\"}
         
        
        export interface ForgetPasswordQuery {\\"token\\"?: string;}
         
        
        export interface FullRegisterApiModel {\\"fullName\\"?: string;\\"introducerCode\\"?: string;\\"phoneNumber\\"?: string;}
         
        
        export enum Gender {Unknown=\\"Unknown\\",Male=\\"Male\\",Female=\\"Female\\"}
         
        
        export interface GetActiveQueryParams {
/**
 * 
 * defaults to 0
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;}
         
        
        export interface GetAllQueryParams {
/**
 * 
 * - Format: int32
 */
\\"FromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"FromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Year\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"accountId\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"businessCategoryId\\"?: number;\\"operationType\\"?: \\"Unknown\\" | \\"Normal\\" | \\"System\\" | \\"DomainCommission\\" | \\"ResellerCommission\\" | \\"Block\\" | \\"Unblock\\" | \\"Refund\\" | \\"NoCommissionRemainGift\\" | \\"RemainGift\\" | \\"DomainBankBatchTransfer\\" | \\"SettlementBatchTransferItem\\" | \\"Synchronization\\" | \\"BlockchainWithdrawInternalTransfer\\" | \\"BlockchainWithdrawUserWallet\\" | \\"BlockchainIncomingTransaction\\" | \\"BlockchainWithdrawUserWalletOffchain\\" | \\"BlockchainFee\\";\\"type\\"?: \\"Debt\\" | \\"Credit\\";}
         
        
        export interface GetByconnectionIdEpayQueryParams {
/**
 * 
 * - Format: date-time
 */
\\"endDate\\"?: string;\\"epayRequestStatus\\"?: \\"Initiated\\" | \\"Paid\\" | \\"Cancelled\\" | \\"Expired\\" | \\"Viewed\\";
/**
 * 
 * - Format: int32
 */
\\"pluginId\\"?: number;\\"plugin_SepidarCustomerName\\"?: string;\\"plugin_SepidarCustomerNumber\\"?: string;\\"plugin_SepidarDocumentNumber\\"?: string;\\"plugin_SepidarVoucherType\\"?: string;\\"plugin_ZhenicCustomerName\\"?: string;\\"plugin_ZhenicCustomerNumber\\"?: string;\\"plugin_ZhenicDollarAmount\\"?: string;\\"plugin_ZhenicDollarAmountRate\\"?: string;\\"plugin_ZhenicEuroAmount\\"?: string;\\"plugin_ZhenicEuroAmountRate\\"?: string;\\"plugin_ZhenicInvoiceNumber\\"?: string;\\"plugin_ZhenicRialAmount\\"?: string;
/**
 * 
 * defaults to 0
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"startDate\\"?: string;
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface GetCommissionQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;}
         
        
        export interface GetCommissionQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;}
         
        
        export interface GetCommissionReportQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetCommissionSumQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetCountQueryParams {
/**
 * 
 * - Format: int32
 */
\\"FromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"FromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Year\\"?: number;}
         
        
        export interface GetEpayRequestComissionQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;}
         
        
        export interface GetIntroducedCountQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetIntroducedReportQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetLinksCountQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetLinksPaidCountQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetLinksPaidReportQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetLinksReportQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetQrByaccountNumberQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"subUserConId\\"?: number;}
         
        
        export interface GetQrcodeQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"subUserConId\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * defaults to 0
 * - Format: int32
 */
\\"skip\\"?: number;\\"states\\"?:  & (SubUserConnectionStatus)[];\\"subUserConnectionStatus\\"?: \\"Pending\\" | \\"Rejected\\" | \\"Connected\\" | \\"Disconnected\\" | \\"Deleted\\";
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;}
         
        
        export interface GetQueryParams {\\"accountIds\\"?: number[];
/**
 * 
 * - Format: date-time
 */
\\"endDate\\"?: string;\\"epayRequestStatus\\"?: \\"Initiated\\" | \\"Paid\\" | \\"Cancelled\\" | \\"Expired\\" | \\"Viewed\\";
/**
 * 
 * - Format: int32
 */
\\"pluginId\\"?: number;\\"plugin_SepidarCustomerName\\"?: string;\\"plugin_SepidarCustomerNumber\\"?: string;\\"plugin_SepidarDocumentNumber\\"?: string;\\"plugin_SepidarVoucherType\\"?: string;\\"plugin_ZhenicCustomerName\\"?: string;\\"plugin_ZhenicCustomerNumber\\"?: string;\\"plugin_ZhenicDollarAmount\\"?: string;\\"plugin_ZhenicDollarAmountRate\\"?: string;\\"plugin_ZhenicEuroAmount\\"?: string;\\"plugin_ZhenicEuroAmountRate\\"?: string;\\"plugin_ZhenicInvoiceNumber\\"?: string;\\"plugin_ZhenicRialAmount\\"?: string;
/**
 * 
 * defaults to 0
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"startDate\\"?: string;\\"states\\"?:  & (EpayRequestActualState)[];
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface GetQueryParams {\\"accountIds\\"?: number[];
/**
 * 
 * - Format: date-time
 */
\\"endDate\\"?: string;\\"epayRequestStatus\\"?: \\"Initiated\\" | \\"Paid\\" | \\"Cancelled\\" | \\"Expired\\" | \\"Viewed\\";
/**
 * 
 * - Format: int32
 */
\\"pluginId\\"?: number;\\"plugin_SepidarCustomerName\\"?: string;\\"plugin_SepidarCustomerNumber\\"?: string;\\"plugin_SepidarDocumentNumber\\"?: string;\\"plugin_SepidarVoucherType\\"?: string;\\"plugin_ZhenicCustomerName\\"?: string;\\"plugin_ZhenicCustomerNumber\\"?: string;\\"plugin_ZhenicDollarAmount\\"?: string;\\"plugin_ZhenicDollarAmountRate\\"?: string;\\"plugin_ZhenicEuroAmount\\"?: string;\\"plugin_ZhenicEuroAmountRate\\"?: string;\\"plugin_ZhenicInvoiceNumber\\"?: string;\\"plugin_ZhenicRialAmount\\"?: string;
/**
 * 
 * defaults to 0
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"startDate\\"?: string;\\"states\\"?:  & (EpayRequestActualState)[];
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface GetQueryParams {\\"applicantName\\"?: string;\\"applicantPhoneNumber\\"?: string;\\"endDate\\"?: string;
/**
 * 
 * obsoleted
 */
\\"epayRequestStatus\\"?: \\"Initiated\\" | \\"Paid\\" | \\"Cancelled\\" | \\"Expired\\" | \\"Viewed\\";
/**
 * 
 * defaults to 0
 * - Format: int32
 */
\\"skip\\"?: number;\\"startDate\\"?: string;\\"states\\"?:  & (EpayRequestActualState)[];
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: int32
 */
\\"FromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"FromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Year\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: int32
 */
\\"FromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"FromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Year\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * code of the corresponding institude
 * - Format: int32
 */
\\"instituteCode\\"?: number;
/**
 * 
 * code specific to each driver
 */
\\"termainalId\\"?: string;}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: int32
 */
\\"count\\"?: number;\\"datePart\\"?: DatePart[];\\"endPartial\\"?: boolean;\\"kpiName\\"?: string[];}
         
        
        export interface GetQueryParams {\\"datePart\\"?: DatePart[];\\"kpiName\\"?: string[];}
         
        
        export interface GetQueryParams {\\"datePart\\"?: DatePart[];
/**
 * 
 * - Format: date-time
 */
\\"end\\"?: string;\\"endPartial\\"?: boolean;\\"kpiName\\"?: string[];
/**
 * 
 * - Format: date-time
 */
\\"start\\"?: string;\\"startPartial\\"?: boolean;}
         
        
        export interface GetQueryParams {\\"channels\\"?: NotificationChannel[];}
         
        
        export interface GetQueryParams {
/**
 * 
 * Subuser Connection Id
 * - Format: int64
 */
\\"subUserConId\\"?: number;}
         
        
        export interface GetQueryParams {\\"identityStatuses\\"?: IdentityStatus[];\\"isActive\\"?: boolean;\\"isPerson\\"?: boolean;
/**
 * 
 * YYYY-MM-DD
 * - Format: date-time
 */
\\"lastActivityFrom\\"?: string;
/**
 * 
 * YYYY-MM-DD
 * - Format: date-time
 */
\\"lastActivityTo\\"?: string;\\"orderBy\\"?: string;\\"orderDesc\\"?: boolean;
/**
 * 
 * YYYY-MM-DD
 * - Format: date-time
 */
\\"registeredFrom\\"?: string;
/**
 * 
 * YYYY-MM-DD
 * - Format: date-time
 */
\\"registeredTo\\"?: string;\\"searchInput\\"?: string;
/**
 * 
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"take\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amountFrom\\"?: number;
/**
 * 
 * - Format: decimal
 */
\\"amountTo\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"endDate\\"?: string;
/**
 * 
 * deprecated. use 'take' instead.
 * - Format: int32
 */
\\"limit\\"?: number;\\"logicalActions\\"?:  & (LogicalActionType)[];\\"operationType\\"?: \\"Unknown\\" | \\"Normal\\" | \\"System\\" | \\"DomainCommission\\" | \\"ResellerCommission\\" | \\"Block\\" | \\"Unblock\\" | \\"Refund\\" | \\"NoCommissionRemainGift\\" | \\"RemainGift\\" | \\"DomainBankBatchTransfer\\" | \\"SettlementBatchTransferItem\\" | \\"Synchronization\\" | \\"BlockchainWithdrawInternalTransfer\\" | \\"BlockchainWithdrawUserWallet\\" | \\"BlockchainIncomingTransaction\\" | \\"BlockchainWithdrawUserWalletOffchain\\" | \\"BlockchainFee\\";\\"operationTypes\\"?:  & (TransactionOperationType)[];
/**
 * 
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"startDate\\"?: string;
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;\\"transactionType\\"?: \\"Debt\\" | \\"Credit\\";\\"transactionTypes\\"?:  & (TransactionType)[];
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;\\"voucherTypes\\"?:  & (VoucherOperationType)[];}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amountFrom\\"?: number;
/**
 * 
 * - Format: decimal
 */
\\"amountTo\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"endDate\\"?: string;\\"logicalActions\\"?:  & (LogicalActionType)[];\\"operationType\\"?: \\"Unknown\\" | \\"Normal\\" | \\"System\\" | \\"DomainCommission\\" | \\"ResellerCommission\\" | \\"Block\\" | \\"Unblock\\" | \\"Refund\\" | \\"NoCommissionRemainGift\\" | \\"RemainGift\\" | \\"DomainBankBatchTransfer\\" | \\"SettlementBatchTransferItem\\" | \\"Synchronization\\" | \\"BlockchainWithdrawInternalTransfer\\" | \\"BlockchainWithdrawUserWallet\\" | \\"BlockchainIncomingTransaction\\" | \\"BlockchainWithdrawUserWalletOffchain\\" | \\"BlockchainFee\\";\\"operationTypes\\"?:  & (TransactionOperationType)[];
/**
 * 
 * - Format: int32
 */
\\"skip\\"?: number;
/**
 * 
 * - Format: date-time
 */
\\"startDate\\"?: string;
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;\\"transactionType\\"?: \\"Debt\\" | \\"Credit\\";\\"transactionTypes\\"?:  & (TransactionType)[];
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;\\"voucherTypes\\"?:  & (VoucherOperationType)[];}
         
        
        export interface GetQueryParams {
/**
 * 
 * - Format: int32
 */
\\"FromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"FromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Year\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"accountId\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"businessCategoryId\\"?: number;\\"operationType\\"?: \\"Unknown\\" | \\"Normal\\" | \\"System\\" | \\"DomainCommission\\" | \\"ResellerCommission\\" | \\"Block\\" | \\"Unblock\\" | \\"Refund\\" | \\"NoCommissionRemainGift\\" | \\"RemainGift\\" | \\"DomainBankBatchTransfer\\" | \\"SettlementBatchTransferItem\\" | \\"Synchronization\\" | \\"BlockchainWithdrawInternalTransfer\\" | \\"BlockchainWithdrawUserWallet\\" | \\"BlockchainIncomingTransaction\\" | \\"BlockchainWithdrawUserWalletOffchain\\" | \\"BlockchainFee\\";\\"type\\"?: \\"Debt\\" | \\"Credit\\";}
         
        
        export interface GetQueryParams {\\"accountNumber\\"?: string;
/**
 * 
 * Phone number or email address
 */
\\"contact\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"customerNumber\\"?: number;
/**
 * 
 * - Format: guid
 */
\\"userId\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface GetQueryParams {
/**
 * 
 * defaults to 10
 * - Format: int32
 */
\\"take\\"?: number;}
         
        
        export interface GetQueryParams {\\"accountNumber\\"?: string;\\"contact\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"customerNumber\\"?: number;
/**
 * 
 * - Format: guid
 */
\\"userId\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface GetReportQueryParams {
/**
 * 
 * - Format: int32
 */
\\"FromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"FromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"TakeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"ToYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"Year\\"?: number;}
         
        
        export interface GetSettlementRequestComissionQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;}
         
        
        export interface GetTransactionsCountQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetTransactionsReportQueryParams {
/**
 * 
 * - Format: int32
 */
\\"fromMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"fromYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"month\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeDays\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeMonths\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"takeYears\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toMonth\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"toYear\\"?: number;
/**
 * 
 * - Format: int32
 */
\\"year\\"?: number;}
         
        
        export interface GetTransferMoneyCommissionQueryParams {
/**
 * 
 * - Format: decimal
 */
\\"amount\\"?: number;}
         
        
        export interface GroupTransferInput {
/**
 * 
 * - Format: decimal
 */
\\"totalAmount\\": number;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\": number;\\"description\\"?: string;\\"targets\\"?: GroupTransferTargetInput[];}
         
        
        export interface GroupTransferQuery {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDate\\": string;
/**
 * 
 * - Format: int64
 */
\\"voucherId\\": number;\\"createDateDisplay\\"?: string;\\"description\\"?: string;\\"targets\\"?: GroupTransferTargetQuery[];\\"userAccountName\\"?: string;\\"userDisplayName\\"?: string;}
         
        
        export interface GroupTransferTargetInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"description\\"?: string;\\"identifier\\"?: string;}
         
        
        export interface GroupTransferTargetQuery {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"accountName\\"?: string;\\"description\\"?: string;\\"userDisplayName\\"?: string;\\"userPhoneNumber\\"?: string;}
         
        
        export enum GroupTransferTargetStatus {InvalidIdentifier=\\"InvalidIdentifier\\",Ok=\\"Ok\\",Unregistered=\\"Unregistered\\",BlockedAccount=\\"BlockedAccount\\",InvalidAmount=\\"InvalidAmount\\"}
         
        
        export interface GroupTransferTargetValidationInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"description\\"?: string;
/**
 * 
 * PhoneNumber or Account Number
 */
\\"identifier\\"?: string;}
         
        
        export interface GroupTransferTargetValidationQuery {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"identifierType\\": UserIdentifierType;\\"status\\": GroupTransferTargetStatus;
/**
 * 
 * - Format: int64
 */
\\"userCustomerNumber\\": number;\\"accountNumber\\"?: string;\\"identifier\\"?: string;\\"identifierTypeDisplay\\"?: string;\\"name\\"?: string;
/**
 * 
 * [Deprecated, use 'StatusDisplay' instead]
 * @deprecated Use 'StatusDisplay' instead.
 */
\\"statusDescription\\"?: string;\\"statusDisplay\\"?: string;\\"userDisplayName\\"?: string;\\"userPhoneNumber\\"?: string;}
         
        
        export enum IPGStatus {NotRequested=\\"NotRequested\\"}
         
        
        export enum IdentityStatus {None=\\"None\\",WatingForCheck=\\"WatingForCheck\\",Checking=\\"Checking\\",EditingRequired=\\"EditingRequired\\",Approved=\\"Approved\\",Rejected=\\"Rejected\\"}
         
        
        export interface ImportantActionApiModel {\\"closeable\\": boolean;
/**
 * 
 * - Format: date-time
 */
\\"createTime\\": string;\\"dismissible\\": boolean;
/**
 * 
 * - Format: int32
 */
\\"id\\": number;\\"isSeen\\": boolean;\\"level\\": NotificationLevel;\\"type\\": NotificationModelType;\\"data\\"?: string;\\"dataId\\"?: string;\\"levelDisplay\\"?: string;\\"text\\"?: string;\\"title\\"?: string;\\"typeDisplay\\"?: string;}
         
        
        export interface InitApiModel {\\"versionState\\": TerminalVersionState;\\"appDownloadLink\\"?: string;\\"versionStateDisplay\\"?: string;}
         
        
        export interface KpiResult {
/**
 * 
 * - Format: date-time
 */
\\"end\\": string;
/**
 * 
 * - Format: date-time
 */
\\"start\\": string;\\"datePart\\"?:  & (DatePart);\\"kpiName\\"?: string;\\"targetIds\\"?: string[];\\"values\\"?: KpiResultValue[];}
         
        
        export interface KpiResultValue {
/**
 * 
 * - Format: date-time
 */
\\"endPoint\\": string;
/**
 * 
 * - Format: date-time
 */
\\"extractedTime\\": string;
/**
 * 
 * - Format: date-time
 */
\\"startPoint\\": string;
/**
 * 
 * - Format: decimal
 */
\\"value\\": number;\\"targetId\\"?: string;}
         
        
        export enum LogEventLevel {Verbose=\\"Verbose\\",Debug=\\"Debug\\",Information=\\"Information\\",Warning=\\"Warning\\",Error=\\"Error\\",Fatal=\\"Fatal\\"}
         
        
        export interface LogSetting {\\"globalLogLevel\\": LogEventLevel;\\"septaPayLogLevel\\": LogEventLevel;\\"serilogLogLevel\\": LogEventLevel;}
         
        
        export enum LogicalActionType {EpayRequest=\\"EpayRequest\\",TransferMoney=\\"TransferMoney\\",AccountChargeRequest=\\"AccountChargeRequest\\",ServiceBill=\\"ServiceBill\\",ServiceMobileCharge=\\"ServiceMobileCharge\\",POS=\\"POS\\",ShareAndBlockRequest=\\"ShareAndBlockRequest\\",ShareRequest=\\"ShareRequest\\",Settlement=\\"Settlement\\",GroupTransferMoney=\\"GroupTransferMoney\\",ShareAndUnblock=\\"ShareAndUnblock\\",Refund=\\"Refund\\",PayCommand=\\"PayCommand\\",Gift=\\"Gift\\",TaxiFairPayment=\\"TaxiFairPayment\\",HitoBitFee=\\"HitoBitFee\\"}
         
        
        export interface MachineSignUp {
/**
 * 
 * - Format: int64
 */
\\"customerNumber\\": number;\\"apiKey\\"?: string;}
         
        
        export interface NewChargeRequestInput {
/**
 * 
 * مبلغ شارژ
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * آدرس بازگشت بعد از پرداخت
 */
\\"callbackUrl\\"?: string;}
         
        
        export interface NewChargeRequestResultQuery {\\"paymentLink\\"?: string;}
         
        
        export interface NewEpayRequestInput {
/**
 * 
 * مبلغ شارژ
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * نوع ارجاع در هنگام ایجاد درخواست
 */
\\"callbackType\\":  & (CallbackType);
/**
 * 
 * تاریخ انتقضا لینک ایجاد شده
 * - Format: int32
 */
\\"expireDays\\": number;
/**
 * 
 * انتقال مستقیم به درگاه
 
 */
\\"isAutoConfirm\\": boolean;
/**
 * 
 * - Format: guid
 */
\\"assisstantUserId\\"?: string;
/**
 * 
 * اطلاعات پرداخت کننده / ها
 */
\\"audiences\\"?: EPayRequestAudienceInput[];
/**
 * 
 * آدرس بازگشت بعد از پرداخت
 */
\\"callbackUrl\\"?: string;
/**
 * 
 * توضحیات درخواست (بابت)
 */
\\"description\\"?: string;
/**
 * 
 * نحوه دریافت کارمزد
 */
\\"getComissionByPayer\\"?: boolean;
/**
 * 
 * تاریخ فاکتور
 * - Format: date-time
 */
\\"invoiceDate\\"?: string;
/**
 * 
 * شماره فاکتور
 */
\\"invoiceNumber\\"?: string;
/**
 * 
 * ...
 * - Format: int32
 */
\\"pluginId\\"?: number;
/**
 * 
 * ...
 */
\\"pluginSpecifics\\"?: EpayRequestPluginSpecificInput[];}
         
        
        export interface NewUserIdentityRequestInput {\\"documents\\"?: DocumentInput[];\\"firstName\\"?: string;\\"lastName\\"?: string;\\"nationalCode\\"?: string;}
         
        
        export interface NotificationApiModel {
/**
 * 
 * - Format: date-time
 */
\\"createTime\\": string;\\"isSeen\\": boolean;\\"level\\": NotificationLevel;\\"type\\": NotificationModelType;\\"dataId\\"?: string;\\"levelDisplay\\"?: string;\\"text\\"?: string;\\"title\\"?: string;\\"typeDisplay\\"?: string;}
         
        
        export enum NotificationChannel {Notification=\\"Notification\\",ImportantAction=\\"ImportantAction\\",SMS=\\"SMS\\",Email=\\"Email\\",FCM=\\"FCM\\",SignalR=\\"SignalR\\"}
         
        
        export enum NotificationLevel {Unknown=\\"Unknown\\",Default=\\"Default\\",Success=\\"Success\\",Info=\\"Info\\",Warning=\\"Warning\\",Danger=\\"Danger\\"}
         
        
        export enum NotificationModelType {Default=\\"Default\\",EPayRequestUnpaid=\\"EPayRequestUnpaid\\",EPayRequestPaid=\\"EPayRequestPaid\\",UserIdentityUnknown=\\"UserIdentityUnknown\\",UserIdentityApproved=\\"UserIdentityApproved\\",UserIdentityRejected=\\"UserIdentityRejected\\",UpgradeToBusinessApproved=\\"UpgradeToBusinessApproved\\",UpgradeToBusinessRejected=\\"UpgradeToBusinessRejected\\",UserBankApproved=\\"UserBankApproved\\",UserBankRejected=\\"UserBankRejected\\",SubUserConnectionCreated=\\"SubUserConnectionCreated\\",SubUserInvitationRejected=\\"SubUserInvitationRejected\\",SubUserInvitationSent=\\"SubUserInvitationSent\\",MoneyDeposit=\\"MoneyDeposit\\",MoneyWithdrawal=\\"MoneyWithdrawal\\",SubUserDisconnectedByBusiness=\\"SubUserDisconnectedByBusiness\\",SubUserDisconnectedBySubUser=\\"SubUserDisconnectedBySubUser\\",Activities=\\"Activities\\",TradeNotification=\\"TradeNotification\\",HitoBitNews=\\"HitoBitNews\\",SystemMessages=\\"SystemMessages\\"}
         
        
        export enum PlatformType {Unknown=\\"Unknown\\",Server=\\"Server\\",Android=\\"Android\\",iOS=\\"iOS\\",Device=\\"Device\\",Browser=\\"Browser\\",PWA=\\"PWA\\",Web=\\"Web\\",Windows=\\"Windows\\",Linux=\\"Linux\\",macOS=\\"macOS\\",Desktop=\\"Desktop\\"}
         
        
        export interface PluginApiModel {
/**
 * 
 * - Format: int32
 */
\\"id\\": number;\\"amountCalculationExpression\\"?: string;\\"logoFileName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"logoFileUniqueId\\"?: string;\\"logoFileUrl\\"?: string;\\"name\\"?: string;\\"properties\\"?: PluginPropertyApiModel[];}
         
        
        export interface PluginPropertyApiModel {\\"fieldType\\": FieldDisplayType;\\"isFilterable\\": boolean;\\"isRequired\\": boolean;\\"currencyName\\"?: string;\\"description\\"?: string;\\"name\\"?: string;\\"title\\"?: string;\\"value\\"?: string;}
         
        
        export interface PosLandingPageApiModel {
/**
 * 
 * - Format: int32
 */
\\"domainId\\": number;
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"accountNumber\\"?: string;\\"domainEnglishName\\"?: string;\\"domainLogoFileName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"domainLogoFileUniqueId\\"?: string;\\"domainLogoFileUrl\\"?: string;\\"domainPersianName\\"?: string;\\"getCommissionFromPayer\\"?: boolean;\\"subUserAvatarFileName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"subUserAvatarFileUniqueId\\"?: string;\\"subUserAvatarFileUrl\\"?: string;\\"subUserDisplayName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"subUserId\\"?: string;\\"userAvatarFileName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"userAvatarFileUniqueId\\"?: string;\\"userAvatarFileUrl\\"?: string;\\"userDisplayName\\"?: string;}
         
        
        export interface PosOnlinePayInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;\\"callBackUrl\\"?: string;\\"callbackType\\"?:  & (CallbackType);\\"description\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"subuserId\\"?: string;}
         
        
        export interface PosWalletPayInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\": number;\\"description\\"?: string;}
         
        
        export interface RegisterApiModel {\\"deviceBrandName\\"?: string;\\"deviceId\\"?: string;\\"deviceOsVersion\\"?: string;\\"deviceToken\\"?: string;\\"phoneNumber\\"?: string;}
         
        
        export interface RegisterNewUserQuery {
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"token\\"?: string;}
         
        
        export interface ReportApiModel {
/**
 * 
 * - Format: int32
 */
\\"count\\": number;
/**
 * 
 * - Format: int32
 */
\\"day\\": number;
/**
 * 
 * - Format: int32
 */
\\"dayOfWeek\\": number;
/**
 * 
 * - Format: int32
 */
\\"key\\": number;
/**
 * 
 * - Format: int32
 */
\\"month\\": number;
/**
 * 
 * - Format: decimal
 */
\\"sum\\": number;
/**
 * 
 * - Format: int32
 */
\\"year\\": number;\\"dayName\\"?: string;\\"label\\"?: string;\\"monthName\\"?: string;
/**
 * 
 * سال دو رقمی
 */
\\"yearShort\\"?: string;}
         
        
        export type RequestBodyAccountCreationApiModel = AccountCreationApiModel
         
        
        export interface RequestBodyFile_Upload {
/**
 * 
 * - Format: binary
 */
\\"file\\"?: string;}
         
        
        export type RequestBodyLogEventLevel = LogEventLevel
         
        
        export type RequestBodyNewEpayRequestInput = NewEpayRequestInput
         
        
        export type RequestBodySubUserNotificationStatusInput = SubUserNotificationStatusInput
         
        
        export type RequestBodyTransferMoneyInput = TransferMoneyInput
         
        
        export type RequestBodyUserBankInput = UserBankInput
         
        
        export interface RequestTotpInput {\\"phoneNumber\\"?: string;}
         
        
        export interface ReselledUserActivityApiModel {
/**
 * 
 * - Format: int32
 */
\\"commissionsPaidToResellerCount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"commissionsPaidToResellerSum\\": number;
/**
 * 
 * - Format: int32
 */
\\"generatedLinks\\": number;
/**
 * 
 * - Format: int32
 */
\\"paidGeneratedLinks\\": number;}
         
        
        export interface ReselledUserApiModel {\\"identityStatus\\": IdentityStatus;\\"ipgStatus\\": IPGStatus;\\"isActive\\": boolean;\\"isBussinessUser\\": boolean;\\"isPerson\\": boolean;
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"userStatus\\": UserStatus;\\"displayName\\"?: string;\\"identityStatusDisplay\\"?: string;\\"imageUrl\\"?: string;\\"ipgStatusDisplay\\"?: string;\\"lastActivityDate\\"?: string;\\"phoneNumber\\"?: string;\\"registerDate\\"?: string;}
         
        
        export interface ReselledUserFilterData {\\"identityStatuses\\"?:  & (DropDownResultOfIdentityStatus);}
         
        
        export interface ResellerApiModel {
/**
 * 
 * - Format: int32
 */
\\"commissionId\\": number;\\"commissionType\\": ComissionType;
/**
 * 
 * - Format: date-time
 */
\\"endDate\\": string;\\"hasSubDomain\\": boolean;\\"isActive\\": boolean;
/**
 * 
 * - Format: date-time
 */
\\"startDate\\": string;\\"commissionDisplay\\"?: string;
/**
 * 
 * - Format: decimal
 */
\\"commissionFixedValue\\"?: number;
/**
 * 
 * - Format: decimal
 */
\\"commissionMaxValue\\"?: number;\\"commissionName\\"?: string;
/**
 * 
 * - Format: double
 */
\\"commissionPercent\\"?: number;\\"commissionTypeDisplay\\"?: string;\\"endDateDisplay\\"?: string;\\"introduceLink\\"?: string;\\"startDateDisplay\\"?: string;}
         
        
        export interface SendConnectionRequestInput {\\"email\\"?: string;\\"phoneNumber\\"?: string;\\"position\\"?: string;}
         
        
        export enum SepidResponseType {Succesful=\\"Succesful\\",Unsuccesful=\\"Unsuccesful\\"}
         
        
        export interface SetAccountAccessForSubUserInput {
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\"?: number;}
         
        
        export interface SetUserBasicInfoInput {
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"firstName\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"introducerCode\\"?: number;\\"lastName\\"?: string;\\"password\\"?: string;}
         
        
        export interface SettingApiModel {\\"logSetting\\"?:  & (LogSetting);}
         
        
        export interface SubDomainApiModel {
/**
 * 
 * - Format: int32
 */
\\"domainId\\": number;\\"isActive\\": boolean;
/**
 * 
 * - Format: guid
 */
\\"resellerUserId\\": string;\\"about\\"?: string;\\"domainEnglishName\\"?: string;\\"domainPersianName\\"?: string;\\"englishName\\"?: string;\\"logoFileName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"logoFileUniqueId\\"?: string;\\"logoFileUrl\\"?: string;\\"persianName\\"?: string;\\"resellerUserDisplayName\\"?: string;\\"subDomainAddress\\"?: string;}
         
        
        export interface SubDomainUpdateApiModel {\\"about\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"logoFileUniqueId\\"?: string;}
         
        
        export interface SubUserAccountDetailQuery {\\"accountStatus\\": AccountStatus;\\"canAssistantsCreatesEpayRequest\\": boolean;\\"canChargeAccount\\": boolean;\\"canReceiveMoney\\": boolean;\\"canRequestSettlement\\": boolean;\\"canSeeEpayRequests\\": boolean;\\"canSeeSettlementRequests\\": boolean;\\"canSeeTransactions\\": boolean;\\"canTransferMoney\\": boolean;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"isActive\\": boolean;\\"notificationEnabled\\": boolean;
/**
 * 
 * - Format: int32
 */
\\"posPaidCount\\": number;
/**
 * 
 * - Format: int32
 */
\\"posScanCount\\": number;\\"accountNumber\\"?: string;\\"accountQrCodeUrl\\"?: string;\\"accountStatusDisplay\\"?: string;\\"name\\"?: string;\\"posLinkUrl\\"?: string;}
         
        
        export interface SubUserActivityApiModel {
/**
 * 
 * - Format: decimal
 */
\\"accountChargeRequestAmount\\": number;
/**
 * 
 * - Format: int32
 */
\\"accountChargeRequestCount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"paidEpayRequestAmount\\": number;
/**
 * 
 * - Format: int32
 */
\\"paidEpayRequestCount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"settlementRequestAmount\\": number;
/**
 * 
 * - Format: int32
 */
\\"settlementRequestCount\\": number;}
         
        
        export interface SubUserConnectionApiModel {
/**
 * 
 * - Format: int64
 */
\\"invitationId\\": number;
/**
 * 
 * - Format: date-time
 */
\\"requestDateTime\\": string;\\"status\\": SubUserConnectionStatus;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead,
 */
\\"subUserConnectionStatus\\":  & (SubUserConnectionStatus);\\"connectDate\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"connectDateTime\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"connectionId\\"?: number;\\"disconnectDate\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"disconnectDateTime\\"?: string;\\"removeDate\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"removeDateTime\\"?: string;\\"requestDate\\"?: string;\\"statusDisplay\\"?: string;\\"subUserAvatarUrl\\"?: string;\\"subUserContact\\"?: string;\\"subUserPositionTitle\\"?: string;\\"subUserTitle\\"?: string;}
         
        
        export enum SubUserConnectionStatus {Pending=\\"Pending\\",Rejected=\\"Rejected\\",Connected=\\"Connected\\",Disconnected=\\"Disconnected\\",Deleted=\\"Deleted\\"}
         
        
        export interface SubUserInvitationApiModel {
/**
 * 
 * - Format: date-time
 */
\\"invitationDate\\": string;
/**
 * 
 * [Deprecated, use 'InvitationToken' to call new endpoints]
 * - Format: int64
 * @deprecated Use 'InvitationToken' to call new endpoints.
 */
\\"invitationId\\": number;\\"businessUserAvatarUrl\\"?: string;\\"businessUserTitle\\"?: string;\\"invitationToken\\"?: string;\\"message\\"?: string;}
         
        
        export interface SubUserNotificationStatusInput {\\"notificationEnabled\\": boolean;}
         
        
        export interface SubUserPermissionApiModel {\\"canAccessToAccount\\": boolean;\\"canAssistantsCreatesEpayRequest\\": boolean;\\"canChargeAccount\\": boolean;\\"canGroupTransferMoney\\": boolean;\\"canReceiveMoney\\": boolean;\\"canRequestSettlement\\": boolean;\\"canSeeEpayRequests\\": boolean;\\"canSeeSettlementRequests\\": boolean;\\"canSeeTransactions\\": boolean;\\"canTransferMoney\\": boolean;
/**
 * 
 * - Format: decimal
 */
\\"realBalance\\": number;
/**
 * 
 * - Format: decimal
 */
\\"totalBalance\\": number;
/**
 * 
 * - Format: int64
 */
\\"userWalletId\\": number;\\"accountNumber\\"?: string;\\"accountTitle\\"?: string;}
         
        
        export enum SubUserPermissionType {Default=\\"Default\\",CanReceiveMoney=\\"CanReceiveMoney\\",CanSeeEpayRequests=\\"CanSeeEpayRequests\\",CanTransferMoney=\\"CanTransferMoney\\",CanSeeTransactions=\\"CanSeeTransactions\\",CanRequestSettlement=\\"CanRequestSettlement\\",CanChargeAccount=\\"CanChargeAccount\\",CanSeeSettlementRequests=\\"CanSeeSettlementRequests\\",CanGroupTransferMoney=\\"CanGroupTransferMoney\\",CanAssistantsCreatesEpayRequest=\\"CanAssistantsCreatesEpayRequest\\"}
         
        
        export interface SubuserInvitationTaskInput {\\"subuserInvitationTaskType\\": SubuserInvitationTaskType;}
         
        
        export enum SubuserInvitationTaskType {Accept=\\"Accept\\",Reject=\\"Reject\\"}
         
        
        export enum SubuserStatus {Connected=\\"Connected\\",DisconnectedByBusinessUser=\\"DisconnectedByBusinessUser\\",DisconnectedBySubUser=\\"DisconnectedBySubUser\\"}
         
        
        export interface TaxiInfoOutput {\\"carTypeCode\\": number;
/**
 * 
 * - Format: int32
 */
\\"lineCode\\": number;\\"activityType\\"?: string;\\"destination\\"?: string;\\"source\\"?: string;\\"vehicleColor\\"?: string;\\"vehicleType\\"?: string;}
         
        
        export enum TaxiPaymentProvider {Sepid=\\"Sepid\\",Simorgh=\\"Simorgh\\"}
         
        
        export interface TaxiPriceOutput {
/**
 * 
 * - Format: int64
 */
\\"amount\\": number;\\"currency\\"?: string;\\"title\\"?: string;}
         
        
        export interface TaxiRecieptApiDto {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"dateTime\\": string;\\"sepidResponse\\": SepidResponseType;\\"taxiProvider\\": TaxiPaymentProvider;\\"accountName\\"?: string;\\"accountNumber\\"?: string;\\"sepidResponseDisplay\\"?: string;\\"taxiProviderDisplay\\"?: string;}
         
        
        export interface TerminalVersionApiModel {\\"currentVersion\\"?: string;\\"minimumVersion\\"?: string;}
         
        
        export enum TerminalVersionState {Default=\\"Default\\",UpToDate=\\"UpToDate\\",Supported=\\"Supported\\",Deprecated=\\"Deprecated\\"}
         
        
        export interface TotpLoginResult {\\"token\\"?: string;}
         
        
        export interface TransactionApiModel {
/**
 * 
 * - Format: int64
 */
\\"accountId\\": number;
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDateTime\\": string;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;
/**
 * 
 * - Format: decimal
 */
\\"remain\\": number;\\"transactionOperationType\\": TransactionOperationType;\\"transactionType\\": TransactionType;
/**
 * 
 * - Format: int64
 */
\\"voucherId\\": number;\\"accountNumber\\"?: string;\\"accountTitle\\"?: string;\\"createDate\\"?: string;\\"description\\"?: string;\\"followupId\\"?: string;\\"logicalAction\\"?:  & (LogicalActionType);\\"logicalActionDisplay\\"?: string;
/**
 * 
 * - Format: int32
 */
\\"targetBusinessCategoryId\\"?: number;\\"targetBusinessCategoryName\\"?: string;\\"transactionOperationTypeDisplay\\"?: string;\\"transactionTypeDisplay\\"?: string;\\"voucherType\\"?:  & (VoucherOperationType);\\"voucherTypeDisplay\\"?: string;}
         
        
        export enum TransactionOperationType {Unknown=\\"Unknown\\",Normal=\\"Normal\\",System=\\"System\\",DomainCommission=\\"DomainCommission\\",ResellerCommission=\\"ResellerCommission\\",Block=\\"Block\\",Unblock=\\"Unblock\\",Refund=\\"Refund\\",NoCommissionRemainGift=\\"NoCommissionRemainGift\\",RemainGift=\\"RemainGift\\",DomainBankBatchTransfer=\\"DomainBankBatchTransfer\\",SettlementBatchTransferItem=\\"SettlementBatchTransferItem\\",Synchronization=\\"Synchronization\\",BlockchainWithdrawInternalTransfer=\\"BlockchainWithdrawInternalTransfer\\",BlockchainWithdrawUserWallet=\\"BlockchainWithdrawUserWallet\\",BlockchainIncomingTransaction=\\"BlockchainIncomingTransaction\\",BlockchainWithdrawUserWalletOffchain=\\"BlockchainWithdrawUserWalletOffchain\\",BlockchainFee=\\"BlockchainFee\\"}
         
        
        export enum TransactionType {Debt=\\"Debt\\",Credit=\\"Credit\\"}
         
        
        export interface TransferMoneyApiModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"commissionAmount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDateTime\\": string;
/**
 * 
 * [Deprecated, use 'CommissionAmount' instead]
 * - Format: decimal
 * @deprecated Use 'CommissionAmount' instead.
 */
\\"domainCommissionAmount\\": number;
/**
 * 
 * - Format: int64
 */
\\"payerAccountId\\": number;
/**
 * 
 * - Format: int64
 */
\\"targetAccountId\\": number;
/**
 * 
 * [Deprecated, use 'PayerAccountId' instead]
 * - Format: int64
 * @deprecated Use 'PayerAccountId' instead.
 */
\\"userAccountId\\": number;
/**
 * 
 * - Format: int64
 */
\\"voucherId\\": number;\\"description\\"?: string;
/**
 * 
 * [Deprecated, use 'OperationId' instead]
 * - Format: int64
 * @deprecated Use 'OperationId' instead.
 */
\\"id\\"?: number;
/**
 * 
 * - Format: int64
 */
\\"operationId\\"?: number;\\"payerAccountName\\"?: string;\\"payerAccountNumber\\"?: string;\\"targetAccountNumber\\"?: string;\\"targetUserAvatarUrl\\"?: string;\\"targetUserDisplayName\\"?: string;
/**
 * 
 * [Deprecated, use 'PayerAccountName' instead]
 * @deprecated Use 'PayerAccountName' instead.
 */
\\"userAccountName\\"?: string;}
         
        
        export interface TransferMoneyInput {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: int64
 */
\\"targetUserAccountId\\": number;\\"description\\"?: string;\\"targetIdentifier\\"?: string;}
         
        
        export interface UnreadNotificationCountApiModel {\\"channel\\": NotificationChannel;
/**
 * 
 * - Format: int32
 */
\\"unreadCount\\": number;
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;}
         
        
        export interface UpgradeToBusinessApiModel {\\"businessShareType\\": BusinessShareType;\\"businessType\\": BusinessType;\\"status\\": IdentityStatus;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead.
 */
\\"upgradeToBusinessRequestStatus\\":  & (IdentityStatus);
/**
 * 
 * [Deprecated, use 'BusinessShareType' instead]
 * @deprecated Use 'BusinessShareType' instead.
 */
\\"userIdentityType\\":  & (BusinessShareType);\\"address\\"?: string;\\"businessLogoImageLink\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"businessLogoImageUniqueId\\"?: string;\\"businessName\\"?: string;\\"businessShareTypeDisplay\\"?: string;\\"businessTypeDisplay\\"?: string;\\"city\\"?: string;\\"description\\"?: string;\\"documents\\"?: DocumentApiModel[];\\"email\\"?: string;\\"faxNumber\\"?: string;\\"managerName\\"?: string;\\"managerPhoneNumber\\"?: string;\\"organizationName\\"?: string;\\"organizationNationalCode\\"?: string;\\"personNationalCode\\"?: string;\\"phoneNumber\\"?: string;\\"rejectCause\\"?:  & (UpgradeToBusinessRejectCause);\\"rejectCauseDescription\\"?: string;\\"rejectCauseDisplay\\"?: string;\\"state\\"?: string;\\"statusDisplay\\"?: string;
/**
 * 
 * [Deprecated, use 'RejectCauseDescription' instead]
 * @deprecated Use 'RejectCauseDescription' instead.
 */
\\"upgradeToBusinessRequestStatusDescription\\"?: string;\\"webSiteUrl\\"?: string;}
         
        
        export enum UpgradeToBusinessRejectCause {DocumentsLack=\\"DocumentsLack\\",DocumentsMismatch=\\"DocumentsMismatch\\",Other=\\"Other\\"}
         
        
        export interface UpgradeToBusinessUserInput {\\"address\\"?: string;\\"businessName\\"?: string;\\"businessShareType\\"?:  & (BusinessShareType);\\"businessType\\"?:  & (BusinessType);\\"city\\"?: string;\\"documents\\"?: DocumentInput[];\\"email\\"?: string;\\"faxNumber\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"logoFileUniqueId\\"?: string;\\"managerName\\"?: string;\\"managerPhoneNumber\\"?: string;\\"organizationName\\"?: string;\\"organizationNationalCode\\"?: string;\\"phoneNumber\\"?: string;\\"state\\"?: string;
/**
 * 
 * [Deprecated, use 'BusinessShareType' instead]
 * @deprecated Use 'BusinessShareType' instead.
 */
\\"userIdentityType\\"?:  & (BusinessShareType);\\"webSiteUrl\\"?: string;}
         
        
        export interface UserBankApiModel {
/**
 * 
 * - Format: int32
 */
\\"bankId\\": number;\\"businessShareType\\": BusinessShareType;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;
/**
 * 
 * [Deprecated, use 'BusinessShareType' instead]
 * @deprecated Use 'BusinessShareType' instead.
 */
\\"identityType\\":  & (BusinessShareType);\\"isVisible\\": boolean;\\"status\\": IdentityStatus;\\"accountNumber\\"?: string;\\"bankLogo\\"?: string;\\"bankName\\"?: string;\\"businessShareTypeDisplay\\"?: string;\\"firstName\\"?: string;\\"lastName\\"?: string;\\"name\\"?: string;\\"rejectCause\\"?:  & (UserBankRejectCause);\\"rejectCauseDescription\\"?: string;\\"rejectCauseDisplay\\"?: string;\\"shebaNo\\"?: string;
/**
 * 
 * [Deprecated, use 'RejectCauseDescription' instead]
 * @deprecated Use 'RejectCauseDescription' instead.
 */
\\"statusDescription\\"?: string;\\"statusDisplay\\"?: string;}
         
        
        export interface UserBankChangeVisibilityInput {\\"isVisible\\"?: boolean;}
         
        
        export type UserBankDetailApiModel =  & (UserBankApiModel & {\\"documents\\"?: DocumentApiModel[];\\"nationalCode\\"?: string;})
         
        
        export interface UserBankInput {\\"accountNumber\\"?: string;
/**
 * 
 * - Format: int32
 */
\\"bankId\\"?: number;\\"businessShareType\\"?:  & (BusinessShareType);\\"documents\\"?: DocumentInput[];\\"firstName\\"?: string;
/**
 * 
 * [Deprecated, use 'BusinessShareType' instead]
 * @deprecated Use 'BusinessShareType' instead.
 */
\\"identityType\\"?:  & (BusinessShareType);\\"isVisible\\"?: boolean;\\"lastName\\"?: string;\\"name\\"?: string;\\"nationalCode\\"?: string;\\"shebaNo\\"?: string;}
         
        
        export enum UserBankRejectCause {DocumentsLack=\\"DocumentsLack\\",DocumentsMismatch=\\"DocumentsMismatch\\",Etc=\\"Etc\\"}
         
        
        export interface UserChangePasswordInput {\\"currentPassword\\"?: string;\\"newPassword\\"?: string;}
         
        
        export type UserDetailQuery =  & (UserMeQuery & {\\"address\\"?: string;\\"city\\"?: string;\\"email\\"?: string;\\"introducedBySubDomain\\"?: string;\\"nationalCode\\"?: string;\\"phoneNumber\\"?: string;\\"state\\"?: string;})
         
        
        export interface UserForgetPasswordInput {\\"phoneNumber\\"?: string;}
         
        
        export enum UserIdentifierType {Default=\\"Default\\",PhoneNumber=\\"PhoneNumber\\",Email=\\"Email\\",CustomerNumber=\\"CustomerNumber\\",AccountNumber=\\"AccountNumber\\"}
         
        
        export enum UserIdentityRejectCause {DocumentsLack=\\"DocumentsLack\\",DocumentsMismatch=\\"DocumentsMismatch\\",DocumentsRejected=\\"DocumentsRejected\\",Etc=\\"Etc\\"}
         
        
        export interface UserIdentityRequestQuery {\\"status\\": IdentityStatus;
/**
 * 
 * [Deprecated, use 'Status' instead]
 * @deprecated Use 'Status' instead.
 */
\\"userIdentityRequestStatus\\":  & (IdentityStatus);\\"documents\\"?: DocumentApiModel[];\\"firstName\\"?: string;\\"lastName\\"?: string;\\"nationalCode\\"?: string;\\"rejectCause\\"?:  & (UserIdentityRejectCause);\\"rejectCauseDescription\\"?: string;\\"rejectCauseDisplay\\"?: string;\\"statusDisplay\\"?: string;
/**
 * 
 * [Deprecated, use 'RejectCauseDescription' instead]
 * @deprecated Use 'RejectCauseDescription' instead.
 */
\\"userIdentityRequestStatusDescription\\"?: string;}
         
        
        export interface UserMeQuery {\\"identityStatus\\": IdentityStatus;\\"isBusinessUser\\": boolean;\\"isResellerUser\\": boolean;\\"isSubUser\\": boolean;
/**
 * 
 * - Format: int64
 */
\\"shareCode\\": number;
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;
/**
 * 
 * - Format: date-time
 */
\\"birthDate\\"?: string;\\"birthDateDisplay\\"?: string;\\"businessName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"businessUserId\\"?: string;\\"gender\\"?:  & (Gender);\\"genderDisplay\\"?: string;\\"identityStatusDisplay\\"?: string;\\"profileImageLink\\"?: string;\\"referredBy\\"?: string;\\"title\\"?: string;}
         
        
        export interface UserMinimalDto {
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"displayName\\"?: string;\\"positionTitle\\"?: string;}
         
        
        export interface UserPluginApiModel {
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"isActive\\": boolean;
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"pluginConfig\\"?: string;\\"pluginName\\"?: string;\\"userDisplayName\\"?: string;}
         
        
        export interface UserPluginDetailApiModel {
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"isActive\\": boolean;
/**
 * 
 * - Format: int32
 */
\\"pluginId\\": number;
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;\\"pluginAmountCalculationExpression\\"?: string;\\"pluginConfig\\"?: string;\\"pluginLogoFileName\\"?: string;
/**
 * 
 * - Format: guid
 */
\\"pluginLogoFileUniqueId\\"?: string;\\"pluginLogoFileUrl\\"?: string;\\"pluginName\\"?: string;\\"properties\\"?: PluginPropertyApiModel[];\\"userDisplayName\\"?: string;}
         
        
        export interface UserPluginTogggleApiModel {\\"isActive\\": boolean;}
         
        
        export interface UserProfileAvatarInput {
/**
 * 
 * - Format: guid
 */
\\"fileUniqueId\\"?: string;}
         
        
        export interface UserProfileInput {\\"address\\"?: string;
/**
 * 
 * - Format: date-time
 */
\\"birthDate\\"?: string;\\"city\\"?: string;\\"email\\"?: string;\\"gender\\"?:  & (Gender);\\"state\\"?: string;}
         
        
        export enum UserStatus {None=\\"None\\",NotVerified=\\"NotVerified\\",VerifiedButNotCompleted=\\"VerifiedButNotCompleted\\",Active=\\"Active\\",TemporaryBlocked=\\"TemporaryBlocked\\",AutoPasswordGenerated=\\"AutoPasswordGenerated\\"}
         
        
        export interface UserVerifyForgetPasswordInput {\\"newPassword\\"?: string;\\"phoneNumber\\"?: string;\\"token\\"?: string;\\"verifyCode\\"?: string;}
         
        
        export interface UserWorkspaceQuery {
/**
 * 
 * - Format: guid
 */
\\"businessUserId\\": string;\\"workspaceType\\": WorkspaceType;\\"businessAvatarUrl\\"?: string;\\"businessName\\"?: string;\\"positionTitle\\"?: string;}
         
        
        export interface VerifyPhoneNumberInput {
/**
 * 
 * - Format: guid
 */
\\"userId\\": string;
/**
 * 
 * - Format: guid
 */
\\"subDomainId\\"?: string;\\"token\\"?: string;\\"verifyCode\\"?: string;}
         
        
        export enum VoucherOperationType {Unknown=\\"Unknown\\",EPayViaBankWithCommissionByPayer=\\"EPayViaBankWithCommissionByPayer\\",EPayViaBankWithCommissionByUser=\\"EPayViaBankWithCommissionByUser\\",EPayViaPSPWithCommissionByPayer=\\"EPayViaPSPWithCommissionByPayer\\",EPayViaPSPWithCommissionByUser=\\"EPayViaPSPWithCommissionByUser\\",EPayViaWalletWithCommissionByPayer=\\"EPayViaWalletWithCommissionByPayer\\",EPayViaWalletWithCommissionByUser=\\"EPayViaWalletWithCommissionByUser\\",TransferMoney=\\"TransferMoney\\",ChargeWallet=\\"ChargeWallet\\",ServiceBill=\\"ServiceBill\\",ServiceMobileCharge=\\"ServiceMobileCharge\\",POSViaBank=\\"POSViaBank\\",POSViaWallet=\\"POSViaWallet\\",ShareAndBlockRequest=\\"ShareAndBlockRequest\\",ShareRequest=\\"ShareRequest\\",SettlementAuto=\\"SettlementAuto\\",SettlementManual=\\"SettlementManual\\",SettlementSuspected=\\"SettlementSuspected\\",GroupTransferMoney=\\"GroupTransferMoney\\",ShareAndUnblock=\\"ShareAndUnblock\\",RefundWithSystemPayer=\\"RefundWithSystemPayer\\",RefundWithAnonymousPayer=\\"RefundWithAnonymousPayer\\",PayCommand=\\"PayCommand\\",GiftForReferrer=\\"GiftForReferrer\\",GiftForNoCommissionRemain=\\"GiftForNoCommissionRemain\\",Sepid=\\"Sepid\\",BatchTransferItem=\\"BatchTransferItem\\",AbstractProviderSynchronization=\\"AbstractProviderSynchronization\\",BlockchainWithdrawInternalTransfer=\\"BlockchainWithdrawInternalTransfer\\",BlockchainWithdrawUserWallet=\\"BlockchainWithdrawUserWallet\\",BlockchainIncomingTransaction=\\"BlockchainIncomingTransaction\\",BlockchainWithdrawUserWalletOnChain=\\"BlockchainWithdrawUserWalletOnChain\\"}
         
        
        export type WalletDetailApiModel =  & (WalletDisplayApiModel & {\\"notificationEnabled\\": boolean;
/**
 * 
 * - Format: int32
 */
\\"permittedSubuserCount\\": number;
/**
 * 
 * - Format: int32
 */
\\"posPaidCount\\": number;
/**
 * 
 * - Format: int32
 */
\\"posScanCount\\": number;\\"accountQrCodeUrl\\"?: string;\\"actionPolicies\\"?: CommissionPolicyApiModel[];\\"posLinkUrl\\"?: string;})
         
        
        export interface WalletDisplayApiModel {\\"automaticSettlement\\": boolean;\\"getComissionFromPayer\\": boolean;
/**
 * 
 * - Format: int64
 */
\\"id\\": number;\\"isActive\\": boolean;
/**
 * 
 * - Format: decimal
 */
\\"realBalance\\": number;
/**
 * 
 * - Format: decimal
 */
\\"totalBalance\\": number;\\"directUserBankAccountNumber\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"directUserBankBankId\\"?: number;\\"directUserBankBankName\\"?: string;\\"directUserBankShebaNumber\\"?: string;\\"intermediateUserBankAccountNumber\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"intermediateUserBankBankId\\"?: number;\\"intermediateUserBankBankName\\"?: string;\\"intermediateUserBankShebaNumber\\"?: string;\\"number\\"?: string;
/**
 * 
 * - Format: int32
 */
\\"relatedUserAccountIndex\\"?: number;\\"title\\"?: string;}
         
        
        export interface WalletReceiptApiModel {
/**
 * 
 * - Format: decimal
 */
\\"amount\\": number;
/**
 * 
 * - Format: decimal
 */
\\"commissionAmount\\": number;
/**
 * 
 * - Format: date-time
 */
\\"createDate\\": string;
/**
 * 
 * - Format: int64
 */
\\"payerAccountId\\": number;\\"callbackUrl\\"?: string;\\"creatorUserAvatarUrl\\"?: string;\\"creatorUserDisplayName\\"?: string;\\"description\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"operationId\\"?: number;\\"payerAccountName\\"?: string;\\"payerAccountNumber\\"?: string;\\"sharerUrl\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"targetAccountId\\"?: number;\\"targetAccountNumber\\"?: string;\\"targetUserAvatarUrl\\"?: string;\\"targetUserDisplayName\\"?: string;
/**
 * 
 * - Format: int64
 */
\\"voucherId\\"?: number;}
         
        
        export enum WorkspaceType {User=\\"User\\",SubUser=\\"SubUser\\"}
        "
`;
