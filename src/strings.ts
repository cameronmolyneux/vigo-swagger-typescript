/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import { readFileSync } from 'fs';
import path from 'path';

const HTTP_REQUEST = readFileSync(path.resolve(__dirname, '../files/httpRequest.tsf')).toString();

const CONFIG = readFileSync(path.resolve(__dirname, '../files/config.tsf')).toString();

const FILE_HOOKS_CONFIG = readFileSync(path.resolve(__dirname, '../files/hooksConfig.tsf')).toString();

const AUTOGENERATED_COMMENT = `
/**
* AUTO_GENERATED Do not change this file directly, rerun the yarn vigo-swag-ts command*/
`;

const SERVICE_BEGINNING = `/* eslint-disable prettier/prettier */
${AUTOGENERATED_COMMENT}
import { AxiosRequestConfig } from "axios";
import { VigoResponse } from "../config";
import { Http } from "../httpRequest";
import { ServiceLocation } from '../../../utils/serviceLocationsAxios';
`;

const getHooksImports = ({ hasInfinity }: { hasInfinity?: boolean }) => `${AUTOGENERATED_COMMENT}
${hasInfinity ? `import { useMemo } from "react";` : ''}
import { AxiosRequestConfig } from "axios";
import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
  ${
    hasInfinity
      ? `  useInfiniteQuery,
  UseInfiniteQueryOptions,`
      : ''
  }
  QueryClient,
  QueryKey,
} from "react-query";
import { RequestError, VigoResponse } from "./config";
${hasInfinity ? `import { paginationFlattenData, getPageSize, getTotal } from "./hooksConfig";` : ''}
`;
const getHooksFunctions = ({ hasInfinity }: { hasInfinity?: boolean }) =>
  hasInfinity
    ? `
const useHasMore = (
  pages: Array<VigoResponse<any>> | undefined,
  list: any,
  queryParams: any,
) =>
  useMemo(() => {
    if (!pages || (pages && pages.length < 1)) {
      return false;
    }

    const total = getTotal(pages);

    if (total !== undefined) {
      if (list && list.length < total) {
        return true;
      }
      return false;
    }
    if (
      paginationFlattenData([pages[pages.length - 1]])?.length === getPageSize(queryParams as any)
    ) {
      return true;
    }

    return false;
  }, [pages, list, queryParams]);

`
    : '';

const DEPRECATED_WARM_MESSAGE = 'This endpoint deprecated and will be remove. Please use an alternative';

export {
  AUTOGENERATED_COMMENT,
  HTTP_REQUEST,
  SERVICE_BEGINNING,
  getHooksFunctions,
  getHooksImports,
  CONFIG,
  DEPRECATED_WARM_MESSAGE,
  FILE_HOOKS_CONFIG
};
