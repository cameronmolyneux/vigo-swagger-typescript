/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * AUTO_GENERATED Do not change this file directly, use config.ts file instead
 */
import axios, { AxiosRequestConfig, CancelToken } from "axios";
import { getAxiosInstance, VigoResponse } from "./config";

/**
 * Cancellation handled here, you can cancel request by call promise.cancel()
 *
 * @example
 *   const promise = getUsers();
 *   setTimeout(() => promise.cancel(), 30000);
 *   const { data } = await promise;
 *
 * @param getPromise
 * @returns
 */
function cancellation<T>(
  getPromise: (cancelToken: CancelToken) => Promise<T>,
): Promise<T> {
  const source = axios.CancelToken.source();
  const promise = getPromise(source.token);
  //@ts-ignore
  promise.cancel = () => {
    source.cancel("request canceled");
  };

  return promise;
}

export const Http = {
  get(
    url: string,
    queryParams: any | undefined,
    _requestBody: undefined,
    configOverride?: AxiosRequestConfig,
  ): Promise<VigoResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance().get(url, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  post(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    configOverride?: AxiosRequestConfig,
  ): Promise<VigoResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance().post(url, requestBody, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  put(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    configOverride?: AxiosRequestConfig,
  ): Promise<VigoResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance().put(url, requestBody, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  patch(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    configOverride?: AxiosRequestConfig,
  ): Promise<VigoResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance().patch(url, requestBody, {
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
  delete(
    url: string,
    queryParams: any | undefined,
    requestBody: any | undefined,
    configOverride?: AxiosRequestConfig,
  ): Promise<VigoResponse<any>> {
    return cancellation((cancelToken) =>
      getAxiosInstance().delete(url, {
        data: requestBody,
        cancelToken,
        params: queryParams,
        ...configOverride,
      }),
    );
  },
};
