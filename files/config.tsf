/* eslint-disable @typescript-eslint/no-explicit-any */
import Axios, {
  AxiosRequestConfig,
  AxiosError,
  AxiosResponse,
  AxiosInstance,
} from "axios";
import qs from "qs";
import { ServiceLocation } from '../utils/serviceLocationsAxios';
import { msalInstance } from '../utils/createMSAL';
import { tenantRequest } from '../authConfig';
import { v4 as uuidv4 } from 'uuid';

const baseConfig: AxiosRequestConfig = {
  baseURL: ServiceLocation.${AUTO_REPLACE_SERVICE_LOCATION},
  paramsSerializer: params => qs.stringify(params, { arrayFormat: 'repeat' }),
    headers: {
      'Content-Type': 'application/json'
    }
};

let axiosInstance: AxiosInstance;

function getAxiosInstance(): AxiosInstance {
  if (!axiosInstance) {
    axiosInstance = Axios.create(baseConfig);

    // Response interceptor
    axiosInstance.interceptors.response.use(
      (async (response: AxiosResponse): Promise<VigoResponse<any>> => {
        // Any status code that lie within the range of 2xx cause this function to trigger
        // Do something with response data
        /**
         * Example on response manipulation
         *
         * @example
         *   const VigoResponse: VigoResponse = {
         *     ...response,
         *   };
         *   return VigoResponse;
         */
        return response;
      }) as any,
      (error: AxiosError) => {
        // Any status codes that falls outside the range of 2xx cause this function to trigger
        // Do something with response error

        if (error.response) {
          return Promise.reject(
            new RequestError(
              error.response.data,
              error.response.status,
              error.response,
            ),
          );
        }

        if (error.isAxiosError) {
          return Promise.reject(
            new RequestError(
              "noInternetConnection",
            ),
          );
        }
        return Promise.reject(error);
      },
    );
  }

  // ًًRequest interceptor
  axiosInstance.interceptors.request.use(
    async config => {
      const accessToken = await msalInstance.acquireTokenSilent(tenantRequest);
      const requestId = uuidv4();
      config.headers = {
        Authorization: `Bearer ${accessToken.accessToken}`,
        Accept: 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded',
        'x-tenantId': localStorage.getItem('currentTenantId'),
        'x-requestId': requestId
      };
      return config;
    },
    error => {
      Promise.reject(error);
    }
  );

  return axiosInstance;
}

class RequestError extends Error {
  constructor(
    public message: string,
    public status?: number,
    public response?: AxiosResponse,
  ) {
    super(message);
  }

  isApiException = true;
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface VigoResponse<R> extends AxiosResponse<R> {}

export {
  getAxiosInstance,
  RequestError,
};
